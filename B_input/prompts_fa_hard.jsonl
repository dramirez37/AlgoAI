{"prompt_id": "FA-H-0001", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN Python algorithm that calculates a 'Deep Value Score' based on the lowest decile ranks of P/B ratio, P/E ratio, and EV/EBITDA within the `Universe.DollarVolume.Top(1000)`. Invest equally in the top 50 stocks by this score, rebalancing quarterly."}
{"prompt_id": "FA-H-0002", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks from the Technology sector (GICS). Rank stocks by a composite score: 40% ROIC rank, 30% Revenue Growth TTM rank, 30% FCF Yield rank. Invest in the top 10 stocks, weighted by their composite score, rebalancing monthly."}
{"prompt_id": "FA-H-0003", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy. Universe: `Universe.DollarVolume.Top(500)`. Rank stocks based on Piotroski F-Score. Go long the top quintile (score >= 8) and short the bottom quintile (score <= 2). Maintain dollar neutrality and rebalance quarterly."}
{"prompt_id": "FA-H-0004", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting the top 20 stocks from the S&P 500 constituents (use `Universe.Index.QC500` or similar dynamic universe) based on the highest 'Quality Growth' score (equal weighting of ROE rank, 3-Year Average Revenue Growth rank, and low D/E ratio rank). Weight positions by inverse volatility calculated over the prior 60 trading days. Rebalance monthly."}
{"prompt_id": "FA-H-0005", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Value'. Calculate the average P/E ratio and average P/B ratio for each GICS sector monthly. Invest equally in the 3 sectors with the lowest combined rank average using representative sector ETFs (assume mapping exists or use placeholders like 'XLK', 'XLF'). Rebalance monthly."}
{"prompt_id": "FA-H-0006", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm investing in stocks from `Universe.DollarVolume.Top(1000)` with positive earnings for the last 4 quarters, ROE > 15%, and Debt-to-Equity < 0.5. From this filtered universe, select the top 30 based on the highest 1-Year EPS Growth. Use equal weighting and rebalance quarterly."}
{"prompt_id": "FA-H-0007", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm calculating a 'Graham Value' score approximation: Rank stocks by lowest P/E and lowest P/B within `Universe.QC500`. Combine ranks equally. Invest in the top decile, but only if their Current Ratio is above 1.5. Use equal weighting and rebalance annually."}
{"prompt_id": "FA-H-0008", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script ranking stocks in the Healthcare sector based on a 'Stability Score': Combine ranks of low Earnings Volatility (std dev of quarterly EPS over 3 years), high Interest Coverage Ratio, and high Gross Margin. Invest in the top 15 stocks, weighted equally, rebalancing semi-annually."}
{"prompt_id": "FA-H-0009", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm for a long-short strategy based on 'Earnings Surprise'. Rank stocks by the magnitude of the latest quarterly EPS surprise (difference between reported and estimated EPS, normalized by price). Go long the top 10% and short the bottom 10% within `Universe.DollarVolume.Top(800)`. Rebalance weekly immediately following major earnings announcements."}
{"prompt_id": "FA-H-0010", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm that selects the top quintile of stocks from `Universe.DollarVolume.Top(1500)` based on Greenblatt's Magic Formula components: rank by Earnings Yield (EBIT/EV) and ROIC. Combine ranks, select the best. Weight positions based on the combined rank score (higher score = higher weight). Rebalance quarterly."}
{"prompt_id": "FA-H-0011", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm screening for 'Quality Value': Select stocks from `Universe.QC500` with ROE > 12%, D/E < 1, and P/E < 20. From these, select the 25 stocks with the highest Dividend Yield. Weight by dividend yield and rebalance quarterly."}
{"prompt_id": "FA-H-0012", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm calculating a 'Growth Momentum' score: 50% 1-Year Revenue Growth rank, 30% 1-Year EPS Growth rank, 20% 6-Month Price Momentum rank. Select the top 30 stocks from the NASDAQ 100 constituents (assume a dynamic method). Use equal weighting and rebalance monthly."}
{"prompt_id": "FA-H-0013", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for sector rotation based on 'Growth'. Calculate the average 1-Year Revenue Growth and average 1-Year EPS Growth for each GICS Sector. Invest equally in the top 2 sectors based on a combined rank average using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0014", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm applying a multi-factor screen: Select stocks from `Universe.DollarVolume.Top(1000)` with Market Cap > $1B, P/S < 2, Positive Free Cash Flow TTM, and Asset Turnover > 1. Invest equally in all qualifying stocks (up to a maximum of 50), rebalancing monthly."}
{"prompt_id": "FA-H-0015", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a basic Fama-French 'Value' factor mimic: Rank stocks in `Universe.DollarVolume.Top(2000)` by P/B ratio. Go long the lowest 30% (Value) and short the highest 30% (Growth). Maintain dollar neutrality and rebalance annually."}
{"prompt_id": "FA-H-0016", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using a 'Profitability Score': Combine ranks of Gross Margin, Operating Margin, and Net Margin within the Consumer Staples sector. Invest in the top 10 stocks, weighted by inverse volatility (90-day). Rebalance quarterly."}
{"prompt_id": "FA-H-0017", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks based on 'Sustainable Growth': Requires Positive Revenue Growth TTM, Positive Net Income Growth TTM, ROE > Sector Median ROE, and D/E < Sector Median D/E. Universe: `Universe.DollarVolume.Top(800)`. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0018", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a 'Quality at a Reasonable Price' (QARP) strategy: Calculate a Quality score (ROE rank, D/E rank) and a Value score (P/E rank, FCF Yield rank). Select stocks in the top 40% by Quality AND top 40% by Value from `Universe.QC500`. Weight equally and rebalance monthly."}
{"prompt_id": "FA-H-0019", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm for a long-short strategy based on 'Operating Efficiency': Rank stocks by Asset Turnover and Inventory Turnover within the Industrials sector. Go long the top quintile and short the bottom quintile. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0020", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm that selects stocks with accelerating revenue growth (latest quarter YoY growth > previous quarter YoY growth) and accelerating EPS growth. Also require ROA > 5%. Select top 25 based on highest revenue acceleration from `Universe.DollarVolume.Top(1000)`. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0021", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using a composite 'Solvency Score': Rank stocks based on Current Ratio, Quick Ratio, and Interest Coverage Ratio. Select the top 20% from the Utilities sector. Weight by market capitalization and rebalance semi-annually."}
{"prompt_id": "FA-H-0022", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a 'GARP' (Growth at a Reasonable Price) strategy: Rank stocks by EPS Growth TTM and P/E ratio within `Universe.DollarVolume.Top(1000)`. Calculate GARP score = (1 + EPS Growth Rank) / (1 + P/E Rank) (handle ranks appropriately, e.g. lower P/E rank is better). Select top 50 stocks by GARP score. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0023", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that applies a negative screen: Exclude stocks from `Universe.DollarVolume.Top(1000)` if they have D/E > 2, negative FCF TTM for 2 consecutive quarters, or declining revenue for 2 consecutive years. Invest equally in the remaining stocks, rebalancing annually."}
{"prompt_id": "FA-H-0024", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Profitability Margins'. Calculate the average Gross Margin, Operating Margin, and Net Margin for each GICS sector quarterly. Invest in the single sector with the highest average combined margin rank using a sector ETF. Rebalance quarterly."}
{"prompt_id": "FA-H-0025", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on a 'Shareholder Yield' score: Combine ranks of Dividend Yield and Net Buyback Yield (change in shares outstanding TTM / market cap). Select the top decile from `Universe.QC500`. Weight by the Shareholder Yield score and rebalance quarterly. Add a rule to exit if FCF turns negative TTM."}
{"prompt_id": "FA-H-0026", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Book Value Growth'. Rank stocks in `Universe.DollarVolume.Top(800)` by 3-Year Average Book Value Per Share Growth Rate. Long top quintile, short bottom quintile. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0027", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining Value and Momentum: Select stocks from the top 40% based on a Value composite score (P/E, P/B, Div Yield ranks) within `Universe.DollarVolume.Top(1000)`. From this subset, select the top 30 based on 6-month price momentum. Weight by inverse volatility (60-day) and rebalance monthly."}
{"prompt_id": "FA-H-0028", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that ranks stocks based on 'Research & Development Intensity' (R&D Expense / Revenue) within the Technology and Healthcare sectors. Invest in the top 15 stocks with the highest intensity, provided their ROA is also positive TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0029", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm implementing a simplified Piotroski F-Score using only 5 factors: Positive Net Income TTM, Positive ROA TTM, Positive Operating Cash Flow TTM, Lower Long Term Debt (YoY change < 0), Higher Current Ratio (YoY change > 0). Select stocks scoring 4 or 5 from `Universe.DollarVolume.Top(1500)`. Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0030", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm that calculates a 'Consistency Score': Based on the standard deviation of quarterly Revenue Growth and quarterly EPS Growth over the past 3 years (lower is better for both). Select the 40 stocks with the lowest combined standard deviation rank from `Universe.QC500`. Weight by market cap and rebalance semi-annually."}
{"prompt_id": "FA-H-0031", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Margin Trends'. Rank stocks by the change in Gross Margin YoY and change in Operating Margin YoY within `Universe.DollarVolume.Top(1000)`. Long top quintile (improving margins), short bottom quintile (deteriorating margins). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0032", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks with high ROIC (> 15%) and high Reinvestment Rate (1 - Payout Ratio, using Net Income and Dividends Paid TTM). Select the top 25 based on the product of ROIC and Reinvestment Rate from `Universe.DollarVolume.Top(800)`. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0033", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing sector rotation based on relative valuation: Calculate the current P/E ratio of each GICS sector relative to its own 5-year average P/E. Invest equally in the 2 sectors trading at the largest discount to their historical average using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0034", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting 'Undervalued Compounders': Stocks must have 5-Year Average ROE > 15%, 5-Year Average EPS Growth > 5%, and current P/E ratio below its 5-year average. Select top 20 based on highest current FCF Yield from `Universe.QC500`. Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0035", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm applying a 'Deep Value' filter with solvency check: Select stocks from `Universe.DollarVolume.Top(1500)` in the bottom decile of P/B ratio AND bottom decile of P/S ratio. Additionally, require Altman Z-Score (simplified 4-factor version if needed) > 1.8. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0036", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Analyst Revision Momentum'. Rank stocks by the 3-month percentage change in consensus EPS estimates for the next fiscal year. Long top 15%, short bottom 15% within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance monthly. (Requires estimate data integration)."}
{"prompt_id": "FA-H-0037", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm focusing on 'Capital Efficiency': Rank stocks in the Industrials and Materials sectors based on ROIC rank and Asset Turnover rank. Combine ranks equally. Invest in the top quintile. Weight positions proportionally to their combined rank score. Rebalance quarterly."}
{"prompt_id": "FA-H-0038", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a 'Dividend Growth' strategy: Select stocks from `Universe.DollarVolume.Top(1000)` with 5 consecutive years of dividend increases, Payout Ratio < 60%, and positive 3-year EPS growth TTM. Select the top 30 based on current Dividend Yield. Weight by yield and rebalance annually. Add a risk rule to exit if D/E ratio exceeds 1.5."}
{"prompt_id": "FA-H-0039", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Low Volatility Anomaly' combined with Quality: Select stocks from `Universe.QC500` in the lowest quintile of 1-year price volatility. From this subset, select the top 50% based on a Quality score (ROE rank, D/E rank, Gross Margin rank). Weight by inverse volatility and rebalance quarterly."}
{"prompt_id": "FA-H-0040", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm that creates sector-neutral value portfolios: Within each GICS sector in `Universe.DollarVolume.Top(1000)`, rank stocks by a composite Value score (P/E, P/B, EV/EBITDA ranks). Select the top 10% from each sector. Weight stocks equally within each sector, and weight sectors according to benchmark weights (e.g., SPY sector weights - requires mapping or placeholder). Rebalance quarterly."}
{"prompt_id": "FA-H-0041", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Inventory Growth vs Sales Growth': Rank stocks in the Consumer Discretionary sector by the difference between YoY Inventory growth % and YoY Sales growth %. Long bottom quintile (low inventory relative to sales), short top quintile (high inventory relative to sales). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0042", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Small Cap Growth Gems': Universe limited to stocks with Market Cap between $300M and $2B. Require Revenue Growth TTM > 20%, EPS Growth TTM > 15%, and ROE > 10%. Select the top 20 based on highest Sales Growth Rate TTM. Equal weight, rebalance monthly. Filter universe using `Fundamental` and `CoarseFundamental` properties."}
{"prompt_id": "FA-H-0043", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using Enterprise Value multiples: Calculate a composite score based on low EV/EBITDA rank, low EV/Sales rank, and high FCF/EV rank within `Universe.DollarVolume.Top(1200)`. Invest in the top decile, weighted by FCF/EV. Rebalance quarterly."}
{"prompt_id": "FA-H-0044", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Earnings Momentum'. Calculate the average EPS Growth Rate TTM for each GICS sector monthly. Invest equally in the 3 sectors with the highest average growth rate using sector ETFs. Rebalance monthly."}
{"prompt_id": "FA-H-0045", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on 'Economic Moat' proxies: High Gross Margin (> Sector Median), High ROIC (> 15%), and Consistent Positive FCF over 5 years TTM. Select the top 30 based on lowest P/E ratio from this filtered group within `Universe.QC500`. Equal weight, rebalance semi-annually."}
{"prompt_id": "FA-H-0046", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Accruals': Calculate Balance Sheet Accruals ((Change in Net Operating Assets TTM) / Average Total Assets TTM). Rank stocks in `Universe.DollarVolume.Top(1000)`. Long bottom quintile (low accruals), short top quintile (high accruals). Dollar neutral, rebalance annually. (Net Operating Assets = (TotalAssets - Cash) - (TotalLiabilities - TotalDebt))."}
{"prompt_id": "FA-H-0047", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining Quality and Dividend Yield: Select stocks from `Universe.DollarVolume.Top(800)` with Piotroski F-Score >= 7 AND Dividend Yield > 3%. Invest in the top 25 based on the lowest Payout Ratio TTM. Weight equally and rebalance quarterly. Exit position if F-Score drops below 5."}
{"prompt_id": "FA-H-0048", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that ranks stocks based on a 'Management Effectiveness' score: Combine ranks for ROE, ROA, and Asset Turnover within the `Universe.QC500`. Invest in the top quintile, weighted by ROE. Rebalance quarterly."}
{"prompt_id": "FA-H-0049", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on positive deviation from historical valuation: Select stocks from `Universe.DollarVolume.Top(1000)` where current P/E is below its 3-year average P/E AND current P/B is below its 3-year average P/B. Also require positive EPS growth TTM. Select top 40 based on largest combined P/E and P/B discount percentage. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0050", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a market-neutral 'Quality' factor portfolio: Rank stocks in `Universe.DollarVolume.Top(1000)` by a Quality score (ROE rank, D/E rank, Gross Margin rank). Go long the top quintile and short the bottom quintile. Maintain dollar neutrality. Rebalance quarterly."}
{"prompt_id": "FA-H-0051", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm that calculates a 'Financial Strength Score' based on Altman Z-Score components (Working Capital/Total Assets, Retained Earnings/Total Assets, EBIT/Total Assets, Market Value Equity/Book Value Total Liabilities, Sales/Total Assets). Rank stocks in `Universe.DollarVolume.Top(1500)` and invest equally in the top decile (highest scores). Rebalance semi-annually."}
{"prompt_id": "FA-H-0052", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks from the Energy sector based on a 'Cash Flow Focus': Rank stocks by highest Operating Cash Flow Yield (OCF TTM / MarketCap) and highest Free Cash Flow Yield (FCF TTM / MarketCap). Combine ranks. Invest in the top 10, weighted by FCF Yield. Rebalance quarterly."}
{"prompt_id": "FA-H-0053", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'Sales Growth Sustainability': Rank stocks by (3-Year Average Revenue Growth Rate) minus (Standard Deviation of Annual Revenue Growth over 3 years). Long top quintile (high stable growth), short bottom quintile (low or volatile growth) within `Universe.DollarVolume.Top(800)`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0054", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting 'Turnaround Candidates': Stocks must have negative EPS in the previous year TTM but positive EPS in the most recent TTM. Also require improving Gross Margins (Current TTM > Previous TTM) and Debt reduction (Total Debt TTM < Previous TTM). Select top 15 based on highest TTM EPS from `Universe.DollarVolume.Top(1000)`. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0055", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Relative Strength' of fundamentals: Calculate the average ROE growth rate (YoY % change in ROE TTM) for each GICS sector. Invest equally in the top 2 sectors with the highest ROE acceleration using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0056", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm focusing on 'Low Leverage Leaders': Select stocks from `Universe.QC500` with Debt-to-Equity < 0.3 AND Interest Coverage Ratio TTM > 10. From this group, select the top 30 based on highest ROIC TTM. Weight by inverse volatility (120-day) and rebalance monthly."}
{"prompt_id": "FA-H-0057", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm calculating a 'Predictable Earnings Score': Based on low standard deviation of annual EPS over the past 5 years and high R-squared of a linear regression fit to that annual EPS trend. Select the top 10% from `Universe.DollarVolume.Top(1000)` with the best combined rank (low std dev, high R^2). Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0058", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that combines 'Value' and 'Analyst Sentiment': Select stocks in the bottom quintile of Forward P/E ratio within `Universe.DollarVolume.Top(800)`. From these, select those with positive analyst rating upgrades (requires external data or placeholder logic for rating changes) or positive estimate revisions in the last 3 months. Invest equally in the top 20 based on lowest Forward P/E. Rebalance monthly."}
{"prompt_id": "FA-H-0059", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm for a long-short strategy based on 'Capital Expenditure Trends': Rank stocks by the ratio of (3-year growth rate of Capital Expenditures) / (3-year growth rate of Sales) within the Industrials sector. Long stocks with low relative CapEx growth (efficient, bottom quintile), short stocks with high relative CapEx growth (potentially overspending, top quintile). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0060", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on 'Free Cash Flow Growth': Require positive FCF TTM and rank stocks by the 3-Year Compound Annual Growth Rate (CAGR) of Free Cash Flow. Select the top quintile from `Universe.DollarVolume.Top(1000)`. Weight by Market Cap and rebalance quarterly. Add risk rule: exit if FCF turns negative for two consecutive quarters."}
{"prompt_id": "FA-H-0061", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using a 'Tangible Book Value' focus: Rank stocks in `Universe.DollarVolume.Top(1200)` by lowest Price-to-Tangible-Book-Value (PTBV = Price / (Book Value Per Share - Goodwill & Intangibles Per Share)). Also require ROE TTM > 5%. Invest equally in the bottom decile by PTBV. Rebalance quarterly."}
{"prompt_id": "FA-H-0062", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a 'Defensive Growth' strategy: Select stocks from Consumer Staples and Utilities sectors. Require Dividend Yield TTM > 2%, Payout Ratio TTM < 70%, and positive 3-Year EPS Growth TTM. Select the top 15 based on lowest 1-year Beta (relative to SPY). Weight by inverse Beta. Rebalance semi-annually."}
{"prompt_id": "FA-H-0063", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing sector rotation based on 'Dividend Yield Spread': Calculate the average Dividend Yield TTM for each GICS sector and compare it to the current 10-Year Treasury Yield (obtainable via `Quandl` or other custom data). Invest equally in the 3 sectors with the highest positive spread using sector ETFs. Rebalance monthly."}
{"prompt_id": "FA-H-0064", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Earnings Quality': Calculate the ratio of Operating Cash Flow TTM to Net Income TTM. Select stocks from `Universe.QC500` where this ratio is > 1.2 (high quality earnings). From this group, select the top 40 based on highest ROE TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0065", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a long-short strategy based on 'Return on Assets Consistency': Rank stocks by the standard deviation of annual ROA over the past 5 years within `Universe.DollarVolume.Top(1000)`. Long bottom quintile (most consistent ROA), short top quintile (least consistent ROA). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0066", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting 'Hidden Growth' stocks: Require Market Cap < $5B, Revenue Growth TTM > 15%, but P/E ratio TTM < 20 (potentially overlooked growth). Also require positive Operating Cash Flow TTM. Select top 25 based on highest Revenue Growth TTM from `Universe.DollarVolume.Top(1500)`. Equal weight, rebalance monthly. Filter universe using `Fundamental` and `CoarseFundamental`."}
{"prompt_id": "FA-H-0067", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining 'Insider Buying' signals with 'Value': Select stocks from `Universe.DollarVolume.Top(1000)` with significant net insider buying over the past 6 months (requires external data source like `Tiingo` or placeholder logic) AND P/B ratio TTM < 1.5 AND P/E ratio TTM < 20. Invest equally in qualifying stocks (max 30), rebalance quarterly."}
{"prompt_id": "FA-H-0068", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script ranking stocks based on 'Efficiency Ratio' (Non-Interest Expense TTM / Revenue TTM) within the Financials sector. Invest in the 15 banks/companies with the lowest (best) efficiency ratios, provided their ROE TTM is also above 10%. Weight by market cap and rebalance quarterly."}
{"prompt_id": "FA-H-0069", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm for a long-short strategy based on 'Gross Profitability': Calculate Gross Profit TTM / Total Assets TTM. Rank stocks in `Universe.DollarVolume.Top(1200)`. Long top quintile, short bottom quintile. Dollar neutral, rebalance quarterly. (Based on Novy-Marx research)."}
{"prompt_id": "FA-H-0070", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on the 'Beneish M-Score' components to AVOID potential earnings manipulators. Calculate the M-Score (requires multiple fundamental fields like DSRI, GMI, AQI, SGI, DEPI, SGAI, LVGI, TATA). Filter out stocks with high M-Scores (e.g., > -1.78) from `Universe.DollarVolume.Top(1000)`. From the remaining, select the top 50 based on a composite Quality score (ROE rank, D/E rank, FCF Yield rank). Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0071", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm performing sector rotation based on 'Valuation Momentum': Calculate the 3-month percentage change in the average P/E ratio for each GICS sector. Invest equally in the 2 sectors with the largest decrease in P/E (becoming cheaper) using sector ETFs. Rebalance monthly."}
{"prompt_id": "FA-H-0072", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Asset-Light Value': Rank stocks in `Universe.DollarVolume.Top(1000)` based on high ROA TTM rank and low P/B ratio TTM rank. Create a combined rank score. Invest in the top decile, weighted by ROA TTM. Rebalance quarterly."}
{"prompt_id": "FA-H-0073", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that applies 'ESG' (Environmental, Social, Governance) criteria combined with 'Profitability'. Select stocks from `Universe.QC500` with high ESG scores (requires external data feed like Refinitiv/Sustainalytics or placeholder logic) AND ROE TTM > 15% AND Net Margin TTM > 5%. Invest equally in the top 30 based on highest ROE, rebalance semi-annually."}
{"prompt_id": "FA-H-0074", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm for a long-short strategy based on 'Changes in Analyst Recommendations': Rank stocks by the net change (upgrades minus downgrades) in analyst ratings over the past 3 months (requires external data or placeholder). Long top 15%, short bottom 15% within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance monthly."}
{"prompt_id": "FA-H-0075", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks using DuPont Analysis components dynamically: Select stocks from `Universe.DollarVolume.Top(800)` prioritizing high Net Profit Margin (> Sector Median TTM), high Asset Turnover (> Sector Median TTM), and stable or increasing Financial Leverage (Equity Multiplier TTM >= Previous Year TTM). Calculate a score based on these criteria. Select top 40 based on score. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0076", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm creating a 'Size Tilt' Value portfolio: Rank stocks in `Universe.DollarVolume.Top(2000)` by P/E ratio TTM. Select the cheapest quintile (low P/E). Within this quintile, weight positions inversely by Market Cap (smaller caps get higher weight). Rebalance quarterly."}
{"prompt_id": "FA-H-0077", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks based on 'Net Operating Assets (NOA) Scaled by Total Assets'. Rank stocks by lowest NOA/TA TTM within `Universe.DollarVolume.Top(1000)`. (NOA = (TotalAssets - Cash) - (TotalLiabilities - TotalDebt)). Invest equally in the lowest quintile. Rebalance annually."}
{"prompt_id": "FA-H-0078", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'R&D Productivity': Calculate a ratio like (3-Year Revenue CAGR) / (Average R&D Expense over last 3 years as % of Revenue). Rank stocks in the Technology sector. Long top quintile (high productivity), short bottom quintile (low productivity). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0079", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Risk-Adjusted Momentum' of fundamentals: Calculate the average Sharpe Ratio of quarterly ROE figures over the past 3 years for each GICS sector. Invest equally in the top 2 sectors with the highest risk-adjusted ROE using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0080", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting 'Unloved Value': Stocks must be in the bottom quintile for P/E ratio TTM AND bottom quintile for 6-month price momentum within `Universe.DollarVolume.Top(1000)`. Also require Piotroski F-Score >= 6. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0081", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm combining 'CANSLIM' elements (simplified fundamental focus): Require Quarterly EPS Growth YoY > 20%, Annual EPS Growth TTM > 20%, ROE TTM > 17%, Current Ratio > 1, and Positive Operating Cash Flow TTM. Select top 20 based on highest 1-year Revenue Growth from `Universe.DollarVolume.Top(1000)`. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0082", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm calculating a 'Cyclical Value Score' for Materials and Industrials sectors: Rank stocks by lowest P/B relative to their own 5-year historical average P/B and highest dividend yield TTM. Combine ranks. Invest in the top 10 stocks, weighted equally. Rebalance semi-annually."}
{"prompt_id": "FA-H-0083", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'Earnings Trend Deviation': Calculate the 5-year linear regression trend of annual EPS. Find the residual (actual latest EPS TTM - predicted EPS TTM). Rank stocks by this residual (normalized by standard error of regression or stock price). Long stocks with large positive residuals, short stocks with large negative residuals within `Universe.QC500`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0084", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Cash Conversion Cycle' (CCC): Calculate CCC = Days Inventory Outstanding + Days Sales Outstanding - Days Payables Outstanding (using TTM data). Select stocks in the lowest quintile (shortest CCC) within the Retail sector (`MorningstarSectorCode.ConsumerCyclical` or similar). Also require positive ROA TTM. Invest equally in the top 10, rebalance quarterly."}
{"prompt_id": "FA-H-0085", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Global Equities' fundamental strategy (using ADRs/global ETFs available in QC): Rank available global stocks/ETFs based on a composite score of P/E ratio rank, Dividend Yield rank, and 1-Year EPS Growth rank. Select the top 20, weight by inverse volatility (100-day), and rebalance quarterly. Universe: Select available ADRs/ETFs meeting $10M average daily dollar volume criteria."}
{"prompt_id": "FA-H-0086", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a sector-neutral 'Growth' portfolio: Within each GICS sector in `Universe.DollarVolume.Top(1000)`, rank stocks by a composite Growth score (Revenue Growth TTM rank, EPS Growth TTM rank, FCF Growth TTM rank). Select the top 10% from each sector. Weight stocks equally within sectors, and weight sectors by their market cap proportion in the initial universe. Rebalance monthly."}
{"prompt_id": "FA-H-0087", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks based on 'Deferred Revenue Growth' for SaaS/Subscription companies: Rank stocks in relevant sub-sectors (e.g., GICS Software & Services) by the YoY growth rate of Deferred Revenue (Long Term + Short Term). Also require Gross Margin TTM > 70%. Select the top 15 based on Deferred Revenue Growth from `Universe.DollarVolume.Top(800)`. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0088", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'Net Debt Change': Rank stocks by the YoY percentage change in Net Debt (Total Debt - Cash & Equivalents). Long stocks with the largest decrease (or increase in net cash), short stocks with the largest increase in Net Debt within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0089", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing rotation between 'Value' and 'Growth' factors based on macro indicator: If the 10-Year Treasury Yield (fetch via `Quandl`) is above its 50-day moving average, invest in a Value portfolio (top quintile based on P/E, P/B, Div Yield ranks). If below, invest in a Growth portfolio (top quintile Revenue Growth, EPS Growth ranks). Universe: `Universe.QC500`. Equal weight within factor portfolio. Check condition weekly, rebalance portfolio monthly."}
{"prompt_id": "FA-H-0090", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks using 'Ohlson O-Score' components for bankruptcy prediction. Calculate O-Score = -1.32 - 0.407*log(TotalAssets/GNP_Price_Level_Index) + 6.03*(TotalLiabilities/TotalAssets) - 1.43*(WorkingCapital/TotalAssets) + 0.076*(CurrentLiabilities/CurrentAssets) - 1.72*(1 if TL/TA > 1 else 0) - 2.37*(NetIncome/TotalAssets) - 1.83*(OCF/TotalLiabilities) + 0.285*(1 if NI_t-1 & NI_t-2 < 0 else 0) - 0.521*((NI_t - NI_t-1)/(abs(NI_t) + abs(NI_t-1))). Filter out stocks with O-Scores > 0.5 from `Universe.DollarVolume.Top(1500)`. Invest equally in the remaining lowest O-Score quintile. Rebalance annually. (Requires careful component calculation and GNP index handling)."}
{"prompt_id": "FA-H-0091", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm investing in 'Royalty & Streaming' companies (filter by specific GICS or keywords): Select based on high Operating Margins TTM (>50%), low Debt/Equity TTM (<0.5), and consistent dividend payments over 3 years. Select top 5 based on highest FCF Yield TTM from available names meeting volume criteria. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0092", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining 'Activist Investor' targets with 'Value': Identify stocks with recent Schedule 13D filings by known activist funds (requires external data feed like `Tiingo Form 13` or placeholder logic). From this list, select those trading below 80% of a calculated Graham Number AND have P/B < 1.5. Invest equally in top 5 candidates meeting value criteria. Rebalance quarterly or upon new relevant filings."}
{"prompt_id": "FA-H-0093", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'Dividend Coverage Ratio': Calculate Coverage = Operating Cash Flow TTM / Total Cash Dividends Paid TTM. Rank stocks in `Universe.DollarVolume.Top(800)` with Dividend Yield TTM > 1%. Long stocks with high coverage (top quintile, > 2x), short stocks with low coverage (bottom quintile, < 1.2x). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0094", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting 'Foreign Stocks' (ADRs) with 'High Quality': Rank available ADRs on QC based on ROIC TTM rank (>15% baseline), low D/E TTM rank (<1 baseline), and high Gross Margin TTM rank (>40% baseline). Select top 15 ADRs meeting $5M average daily dollar volume criteria. Weight by inverse volatility (90-day). Rebalance quarterly."}
{"prompt_id": "FA-H-0095", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm using 'Graham Number' as a strict filter: Select stocks from `Universe.DollarVolume.Top(1000)` whose current Price is below their Graham Number (Sqrt(22.5 * EPS TTM * BVPS)). From these, select the top 20 based on highest Dividend Yield TTM. Equal weight, rebalance annually. Add risk rule: exit if Price goes above 1.2 * Graham Number."}
{"prompt_id": "FA-H-0096", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Sustainable Growth Rate (SGR) vs Actual Growth': Calculate SGR = ROE TTM * (1 - Payout Ratio TTM). Rank stocks in `Universe.QC500` by the difference: (EPS Growth TTM - SGR). Long stocks growing significantly faster than SGR (top quintile diff), short stocks growing significantly slower (bottom quintile diff). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0097", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing 'Industry Rotation' within a Sector: Focus on the Technology sector. Calculate average Revenue Growth TTM for major GICS Industries (e.g., Software, Hardware, Semis - map stocks to industries). Invest equally in the top 2 industries showing highest growth, using the top 5 stocks (by market cap) within those selected industries. Rebalance monthly."}
{"prompt_id": "FA-H-0098", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script selecting 'Cash-Rich Value': Select stocks from `Universe.DollarVolume.Top(1000)` with Net Cash (Cash & Equivalents - Total Debt) greater than 20% of Market Cap AND P/E ratio TTM < 15 AND P/B ratio TTM < 1.5. Invest equally in qualifying stocks (max 40), rebalance quarterly."}
{"prompt_id": "FA-H-0099", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm using a 'Dynamic Multi-Factor Model': Calculate monthly scores for Value (P/E, P/B ranks), Quality (ROE, D/E ranks), and Momentum (6M Price Change rank). Calculate factor returns over the past 3 months. Weight the factor scores: 60% * (Best performing factor score) + 20% * (Mid performing factor score) + 20% * (Worst performing factor score). Select top quintile based on the dynamically weighted composite score from `Universe.QC500`. Equal weight, rebalance monthly (factor weights update monthly, portfolio reconstitutes monthly)."}
{"prompt_id": "FA-H-0100", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a 'Merger Arbitrage' screener (fundamental quality check): Identify announced cash M&A deals (requires external data feed like `Tiingo Merger Arbitrage` or placeholder). Filter for deals where the target company has ROE > 10% TTM, D/E < 1, positive FCF TTM, and the spread between current price and deal price is > 3% annualized. Invest in top 5 qualifying deals based on highest annualized spread. Hold until deal close/break, rebalance periodically. *Note: Requires careful handling of deal data and corporate actions.*"}
{"prompt_id": "FA-H-0101", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm calculating a 'Composite Growth Score': 30% Revenue Growth TTM rank, 30% EPS Growth TTM rank, 20% FCF Growth TTM rank, 20% Book Value Growth TTM rank. Select top decile from `Universe.DollarVolume.Top(1000)`. Weight by score, rebalance quarterly."}
{"prompt_id": "FA-H-0102", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Asset Growth Anomaly': Calculate Total Asset Growth YoY %. Rank stocks in `Universe.DollarVolume.Top(1500)`. Long bottom quintile (low asset growth), short top quintile (high asset growth). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0103", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script selecting stocks with high 'Return on Net Operating Assets (RNOA)': Calculate RNOA = Operating Income After Tax TTM / Average Net Operating Assets TTM. Select top quintile from `Universe.QC500` based on RNOA TTM. Additionally require P/B < 3. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0104", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Earnings Yield Spread': Calculate the average Earnings Yield (EBIT/EV) TTM for each GICS sector and compare it to the 10-Year Treasury Yield. Invest equally in the 3 sectors with the highest positive spread using sector ETFs. Rebalance monthly."}
{"prompt_id": "FA-H-0105", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on 'Low Accruals and High Quality': Select stocks from `Universe.DollarVolume.Top(1000)` in the bottom quintile based on Balance Sheet Accruals/Assets TTM AND top quintile based on a Quality score (ROE rank, D/E rank). Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0106", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using a 'Z-Score Trend' strategy: Calculate Altman Z-Score monthly for stocks in `Universe.DollarVolume.Top(1000)`. Select stocks whose Z-Score has improved significantly over the past 6 months (e.g., > 0.5 increase) AND is currently above 1.8. Invest in top 20 based on magnitude of improvement. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0107", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Sales Surprise': Rank stocks by the percentage difference between reported quarterly revenue and consensus estimated revenue. Long top 10%, short bottom 10% within `Universe.DollarVolume.Top(800)`. Rebalance quarterly after earnings. (Requires estimate data)."}
{"prompt_id": "FA-H-0108", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a 'GARP Screen with Momentum Filter': Select stocks from `Universe.QC500` that are in the top 40% for EPS Growth TTM rank AND bottom 40% for P/E ratio TTM rank. From this GARP subset, select the top 50% based on 3-month price momentum. Weight by inverse volatility (60-day), rebalance monthly."}
{"prompt_id": "FA-H-0109", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on ' Piotroski F-Score within Value': First, select stocks in the bottom quintile by P/B ratio TTM from `Universe.DollarVolume.Top(1200)`. Then, from this value subset, select only those with a Piotroski F-Score >= 7. Invest equally in the qualifying stocks, rebalance annually."}
{"prompt_id": "FA-H-0110", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Analyst Sentiment Momentum': Calculate the average change in consensus EPS estimates over the past 3 months for each GICS sector. Invest equally in the 2 sectors with the most positive estimate revisions using sector ETFs. Rebalance monthly. (Requires estimate data)."}
{"prompt_id": "FA-H-0111", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Operating Leverage': Calculate Degree of Operating Leverage (DOL = % Change in EBIT TTM / % Change in Sales TTM). Rank stocks in `Universe.DollarVolume.Top(1000)`. Long high DOL stocks (top quintile) anticipating sales increases, short low DOL stocks (bottom quintile). Dollar neutral, rebalance quarterly. *Note: Requires careful calculation, potentially sensitive.*"}
{"prompt_id": "FA-H-0112", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'MicroCap Value': Universe limited to Market Cap < $300M using `CoarseFundamental`. Require P/B TTM < 1, P/E TTM < 15, and positive Operating Cash Flow TTM. Select top 30 based on lowest P/B ratio TTM. Equal weight, rebalance quarterly. Filter universe using `Fundamental` and `CoarseFundamental`."}
{"prompt_id": "FA-H-0113", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using a 'Multi-Factor Quality Score': Combine ranks of ROIC TTM, ROE TTM, Gross Margin Stability (std dev over 3 years quarterly), and Low Accruals (Balance Sheet Accruals / Avg Assets TTM). Select top decile from `Universe.QC500`. Weight by the composite quality score, rebalance quarterly."}
{"prompt_id": "FA-H-0114", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'FCF Conversion': Calculate FCF TTM / Net Income TTM. Select stocks from `Universe.DollarVolume.Top(1000)` with FCF Conversion > 1.1 AND positive Revenue Growth TTM. Select top 40 based on highest FCF Yield (FCF TTM/MarketCap). Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0115", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating sector-neutral 'Momentum' portfolios (using fundamental momentum): Within each GICS sector in `Universe.DollarVolume.Top(1000)`, rank stocks by a composite score of EPS Growth TTM rank and Revenue Growth TTM rank. Select the top 10% from each sector. Weight stocks equally within sectors, and weight sectors by benchmark weights (e.g., SPY). Rebalance monthly."}
{"prompt_id": "FA-H-0116", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Change in Net Operating Assets (NOA)': Calculate Change in NOA TTM / Average Total Assets TTM. Rank stocks in `Universe.DollarVolume.Top(1200)`. Long bottom quintile (low change, potentially higher quality earnings), short top quintile (high change, potentially lower quality). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0117", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting stocks based on 'Magic Formula with Quality Filter': Select top quintile based on Greenblatt Magic Formula ranks (Earnings Yield, ROIC) from `Universe.DollarVolume.Top(1500)`. From this subset, filter out stocks with D/E ratio TTM > 1.5 or negative FCF TTM. Invest equally in the remaining stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0118", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing rotation between 'Low Volatility' and 'High Beta' based on VIX: If VIX (fetch via `Quandl` or custom data) is above its 50-day average (high fear), invest in a Low Volatility portfolio (bottom quintile 1-year volatility from `Universe.QC500`, filtered for ROE TTM>10%). If VIX is low, invest in High Beta portfolio (top quintile 1-year Beta, filtered for positive EPS growth TTM). Equal weight within portfolio. Check condition daily, rebalance portfolio monthly."}
{"prompt_id": "FA-H-0119", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks using 'Cash Flow Return on Investment (CFROI)': Calculate CFROI (approximated as OCF TTM / (Average Total Assets - Average Current Liabilities)). Select stocks from `Universe.DollarVolume.Top(1000)` in the top quintile by CFROI, also requiring CFROI > 8%. Weight by CFROI score, rebalance quarterly."}
{"prompt_id": "FA-H-0120", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm for a long-short strategy based on 'Inventory Turnover Trend': Calculate the YoY percentage change in Inventory Turnover ratio (COGS TTM / Avg Inventory). Rank stocks in the Retail and Consumer Durables sectors. Long stocks with increasing turnover (top quintile), short stocks with decreasing turnover (bottom quintile). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0121", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting 'Dividend Aristocrats' with Value overlay: Select stocks with 25+ consecutive years of dividend increases (requires historical data or proxy filter like membership in NOBL index) from `Universe.QC500`. From this group, select those trading in the bottom 40% based on P/E ratio TTM. Invest equally in the top 20 based on lowest P/E, rebalance annually."}
{"prompt_id": "FA-H-0122", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining 'Share Repurchases' and 'Profitability': Select stocks from `Universe.DollarVolume.Top(800)` with positive Net Buyback Yield TTM (> 1%) AND ROE TTM > 15%. Invest in the top 30 based on highest ROE TTM. Weight by Net Buyback Yield TTM, rebalance quarterly."}
{"prompt_id": "FA-H-0123", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for sector rotation based on 'Relative Valuation vs History': Calculate the current average P/S ratio TTM for each GICS sector and compare it to the sector's 5-year average P/S ratio TTM. Invest equally in the 2 sectors trading at the largest discount to their historical average using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0124", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Financial Leverage Impact': Calculate ROE TTM / ROA TTM. Select stocks from `Universe.DollarVolume.Top(1000)` where this ratio is high (> 1.5, indicating leverage magnifies returns) AND Interest Coverage Ratio TTM > 5 (indicating manageable debt). Select top 30 based on highest ROE TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0125", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Risk Parity' portfolio based on fundamental factors: Create factor portfolios for Value (Low P/B), Quality (High ROE), and Growth (High Rev Growth). Estimate volatility of each factor portfolio (e.g., using historical returns of simulated factor portfolios). Allocate capital inversely proportional to the estimated volatility of each factor portfolio. Rebalance quarterly. Universe: `Universe.QC500`. *Note: Complex implementation.*"}
{"prompt_id": "FA-H-0126", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'R&D Spending Growth vs Sales Growth': Rank stocks in Tech/Healthcare by (YoY R&D Expense Growth %) - (YoY Sales Growth %). Long stocks where sales growth outpaces R&D growth (bottom quintile difference, efficient R&D), short stocks where R&D growth vastly outpaces sales growth (top quintile difference). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0127", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Consistent Dividend Payers with Growth': Require 10+ years of uninterrupted dividend payments (proxy/filter needed) AND 5-year Dividend Growth Rate (CAGR) > 5% AND Payout Ratio TTM < 65%. Select top 25 based on highest 3-year Revenue Growth CAGR from `Universe.QC500`. Weight equally, rebalance annually."}
{"prompt_id": "FA-H-0128", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Value Trap Avoidance': Select stocks in the bottom quintile by P/E ratio TTM from `Universe.DollarVolume.Top(1000)`. Exclude stocks with negative 1-year Revenue Growth TTM, Piotroski F-Score < 5, or D/E ratio TTM > 2. Invest equally in the remaining qualifying value stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0129", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Tangible Asset Value': Calculate Net Tangible Assets TTM (Total Assets - Goodwill - Intangibles). Select stocks from `Universe.DollarVolume.Top(1500)` where Market Cap is less than Net Tangible Assets TTM. Also require positive FCF TTM. Select top 20 based on lowest Market Cap / Net Tangible Assets ratio. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0130", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing industry rotation within Consumer Discretionary: Calculate average P/E ratio TTM for sub-industries (e.g., Auto, Retail, Media). Compare current P/E to 3-year average P/E for each sub-industry. Invest equally in the 2 sub-industries trading at the largest discount, using representative stocks. Rebalance monthly."}
{"prompt_id": "FA-H-0131", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Days Sales Outstanding (DSO) Trend': Calculate the YoY change in DSO TTM. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long stocks with decreasing DSO (bottom quintile, faster cash collection), short stocks with increasing DSO (top quintile, slower collection). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0132", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'High Conviction Quality': Requires ROIC TTM > 20%, Net Margin TTM > 10%, AND D/E TTM < 0.5. Select all qualifying stocks from `Universe.QC500`. Weight positions by Market Cap, rebalance quarterly. Implement a max position size of 8% using portfolio methods."}
{"prompt_id": "FA-H-0133", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script combining 'Low Volatility' with 'Dividend Growth': Select stocks from `Universe.DollarVolume.Top(1000)` in the lowest quintile of 1-year price volatility AND have a 5-year Dividend CAGR > 5%. Select the top 30 based on highest current Dividend Yield TTM. Weight by inverse volatility, rebalance quarterly. Exit if payout ratio TTM exceeds 90%."}
{"prompt_id": "FA-H-0134", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm implementing a 'Core-Satellite' strategy: 70% Core portfolio invested equally in the top 50 stocks by a Quality score (ROE TTM, D/E TTM, Margin Stability ranks) from `Universe.QC500`. 30% Satellite portfolio invested equally in the top 10 stocks by a Growth score (Rev Growth TTM, EPS Growth TTM ranks) from the same universe (excluding Core holdings). Rebalance both sleeves quarterly."}
{"prompt_id": "FA-H-0135", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on 'Economic Value Added (EVA) Momentum': Calculate EVA = NOPAT TTM - (WACC * Capital Employed TTM) (requires NOPAT, WACC estimation, Capital Employed calculation). Rank stocks based on the change in EVA over the last TTM period within `Universe.DollarVolume.Top(800)`. Invest in the top quintile (highest positive change). Equal weight, rebalance quarterly. *Note: Complex calculation.*"}
{"prompt_id": "FA-H-0136", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Book Value vs Market Value Trend': Calculate the 1-year percentage change in the P/B ratio TTM. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long stocks where P/B has decreased significantly (bottom quintile, potentially becoming cheaper), short stocks where P/B has increased significantly (top quintile, potentially becoming expensive). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0137", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Small Cap GARP': Universe: Market Cap $200M - $2.5B using `CoarseFundamental`. Rank stocks by (EPS Growth TTM / PE Ratio TTM) (PEG-like). Select top 30 stocks with PEG < 1.5 and ROE TTM > 12%. Equal weight, rebalance monthly. Filter universe using `Fundamental`/`CoarseFundamental`."}
{"prompt_id": "FA-H-0138", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing sector rotation based on 'Profitability Surprise': Calculate the average percentage EPS surprise for each GICS sector in the latest earnings season. Invest equally in the 2 sectors with the highest positive average surprise using sector ETFs. Rebalance quarterly after earnings season. (Requires estimate data)."}
{"prompt_id": "FA-H-0139", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Net Payout Yield': Calculate Net Payout Yield TTM = (Dividends Paid TTM + Share Repurchases TTM) / Market Cap. Select stocks from `Universe.QC500` in the top quintile by Net Payout Yield TTM. Also require positive FCF TTM. Weight by Net Payout Yield score, rebalance quarterly."}
{"prompt_id": "FA-H-0140", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a market-neutral 'Value vs Growth' portfolio: Rank stocks in `Universe.DollarVolume.Top(1000)` by a Value score (P/E, P/B ranks) and a Growth score (Rev Growth, EPS Growth ranks). Go long the top quintile by Value score, and short the top quintile by Growth score. Maintain dollar neutrality. Rebalance quarterly."}
{"prompt_id": "FA-H-0141", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using a 'Buffett-Style' screen (simplified): Require ROE TTM > 15% for last 5 years (or average > 15%), consistent positive EPS growth TTM over 5 years, D/E TTM < 0.5, and current P/E TTM < 20. Select top 15 based on highest FCF Yield TTM from `Universe.QC500`. Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0142", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Gross Margin Growth': Rank stocks by the YoY percentage growth rate of Gross Margin dollars TTM. Long top quintile (high growth), short bottom quintile (low/negative growth) within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0143", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script selecting 'ESG Leaders with Value': Select stocks from `Universe.QC500` with top-tier composite ESG scores (external data/placeholder needed) AND P/B ratio TTM < 2 AND P/E ratio TTM < 25. Invest equally in the top 30 based on lowest P/E ratio, rebalance semi-annually."}
{"prompt_id": "FA-H-0144", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Debt Paydown Capacity': Calculate (Operating Cash Flow TTM / Total Debt TTM). Select stocks from `Universe.DollarVolume.Top(1000)` with this ratio > 0.2 (can pay debt in < 5 yrs) AND positive revenue growth TTM. Select top 40 based on highest ratio. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0145", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing industry rotation within Healthcare: Calculate average R&D Intensity (R&D TTM/Sales TTM) for GICS sub-industries (Pharma, Biotech, MedTech). Invest equally in the sub-industry with the highest R&D intensity AND positive average revenue growth TTM, using representative stocks. Rebalance quarterly."}
{"prompt_id": "FA-H-0146", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Piotroski F-Score Trend': Calculate the change in Piotroski F-Score from previous year to current year. Rank stocks in `Universe.DollarVolume.Top(1200)`. Long stocks with the biggest improvement (top quintile change), short stocks with the biggest decline (bottom quintile change). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0147", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Deep Value Cyclicals': Focus on Materials & Industrials sectors. Select stocks in bottom decile P/B TTM AND bottom decile P/S TTM relative to their sector peers. Also require Current Ratio TTM > 1. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0148", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a 'Quality GARP' strategy: Calculate a Quality score (ROE TTM, D/E TTM ranks) and a GARP score (EPS Growth TTM / PE Ratio TTM rank). Select stocks from `Universe.QC500` in the top 40% by Quality AND top 40% by GARP score. Weight by Quality score, rebalance monthly."}
{"prompt_id": "FA-H-0149", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Insider Transactions & Valuation': Select stocks from `Universe.DollarVolume.Top(1000)` with net insider buying > 1% of shares outstanding over 6 months (external data/placeholder) AND Forward P/E < 15 AND P/S TTM < 2. Invest equally in qualifying stocks (max 25), rebalance quarterly."}
{"prompt_id": "FA-H-0150", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a volatility-managed value portfolio: Select top quintile value stocks (P/E TTM, P/B TTM ranks) from `Universe.QC500`. Calculate portfolio volatility based on these stocks (using price data). If estimated portfolio annualized volatility exceeds a threshold (e.g., 20%), reduce allocation / hedge (e.g., hold more cash). Otherwise, maintain full allocation. Weight holdings by inverse individual stock volatility. Rebalance monthly, check volatility daily."}
{"prompt_id": "FA-H-0151", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm calculating a 'Stability and Value' score: 30% Low Earnings Volatility rank (3yr quarterly std dev), 30% Low Debt/Equity rank TTM, 20% Low P/E rank TTM, 20% Low P/B rank TTM. Select top 10% from `Universe.DollarVolume.Top(1000)`. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0152", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Free Cash Flow Yield Spread': Calculate FCF Yield (FCF TTM / Market Cap). Rank stocks in `Universe.DollarVolume.Top(1000)`. Go long the top quintile and short the bottom quintile. Maintain dollar neutrality, rebalance quarterly."}
{"prompt_id": "FA-H-0153", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script selecting stocks based on 'Return on Tangible Assets (ROTA)': Calculate ROTA = Net Income TTM / Average (Total Assets TTM - Goodwill & Intangibles TTM). Select stocks from `Universe.QC500` with ROTA > 15% AND positive revenue growth TTM. Weight by ROTA score, rebalance quarterly."}
{"prompt_id": "FA-H-0154", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Margin Expansion': Calculate the average YoY change in Operating Margin TTM for each GICS sector. Invest equally in the 2 sectors showing the largest margin expansion using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0155", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting 'Dogs of the Dow' variant: From `Universe.Index.DJIA(...)` constituents, select the 10 stocks with the highest dividend yield TTM. From these 10, filter out any with a Payout Ratio TTM > 80% or negative EPS growth TTM. Invest equally in the remaining (usually 5-10), rebalance annually."}
{"prompt_id": "FA-H-0156", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using 'Beneish M-Score Trend': Calculate M-Score quarterly. Select stocks from `Universe.DollarVolume.Top(1000)` where the M-Score has decreased significantly (e.g., by 0.5 or more) over the last year AND is currently below -2.0. Invest in top 20 based on largest decrease. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0157", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Change in Capital Intensity': Calculate Capital Intensity = Average PP&E TTM / Sales TTM. Rank stocks based on the YoY percentage change in Capital Intensity within the Industrials sector. Long bottom quintile (decreasing intensity, more efficient), short top quintile (increasing intensity). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0158", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script selecting 'High Growth & High Margin': Require Revenue Growth TTM > 25%, Gross Margin TTM > 50%, AND Operating Margin TTM > 15%. Select all qualifying stocks from `Universe.DollarVolume.Top(800)`. Weight by Revenue Growth Rate TTM, rebalance monthly. Implement max 10% position size."}
{"prompt_id": "FA-H-0159", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Shareholder Yield with Debt Adjustment': Calculate Shareholder Yield = (Dividend Yield TTM + Net Buyback Yield TTM) - (YoY % Change in Total Debt). Select top decile from `Universe.QC500` based on this adjusted yield. Require positive FCF TTM. Weight by adjusted yield, rebalance quarterly."}
{"prompt_id": "FA-H-0160", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing rotation between 'US Equities' and 'Bonds' based on Earnings Yield vs Bond Yield: Calculate S&P 500 Earnings Yield (e.g., using SPY fundamentals or QC500 average). If SPY E/P > 10Y Treasury Yield + 1% (fetch yield via Quandl), allocate 100% to SPY. If SPY E/P < 10Y Treasury Yield - 1%, allocate 100% to a bond ETF (e.g., AGG). Otherwise, allocate 50/50. Check condition monthly, rebalance monthly."}
{"prompt_id": "FA-H-0161", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Deferred Revenue Trend': Rank stocks in the Software sector by the YoY % growth in Deferred Revenue TTM. Long top quintile (strong future revenue indication), short bottom quintile (weak pipeline). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0162", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Value Stocks with Catalyst Potential': Select stocks in bottom quintile by P/B ratio TTM from `Universe.DollarVolume.Top(1000)`. Additionally, require positive analyst estimate revisions over last 3 months OR significant insider buying (external data/placeholder). Invest equally in top 20 based on lowest P/B, rebalance quarterly."}
{"prompt_id": "FA-H-0163", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using 'Factor Timing' based on economic cycle (simplified): If GDP growth (use proxy like Industrial Production index change from `Quandl`) is accelerating YoY, overweight Growth factor portfolio (top quintile Rev Growth/EPS Growth ranks). If decelerating, overweight Quality factor portfolio (top quintile ROE/D/E ranks). If negative YoY, overweight Value factor portfolio (top quintile P/E/P/B ranks). Universe `Universe.QC500`. Check condition quarterly, rebalance portfolio quarterly."}
{"prompt_id": "FA-H-0164", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Net Current Asset Value (NCAV)': Calculate NCAV = Current Assets TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(1500)` where Market Cap < NCAV (deep value). Also require positive Operating Cash Flow TTM. Select top 15 based on lowest MarketCap/NCAV ratio. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0165", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating sector-neutral 'Profitability' portfolios: Within each GICS sector in `Universe.DollarVolume.Top(1000)`, rank stocks by a composite Profitability score (Gross Margin TTM rank, ROA TTM rank, OCF/Assets TTM rank). Select the top 10% from each sector. Weight stocks equally within sectors, and weight sectors by benchmark weights (e.g., SPY). Rebalance quarterly."}
{"prompt_id": "FA-H-0166", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Sustainable Payout Ratio': Calculate Payout Ratio = Dividends Paid TTM / Operating Cash Flow TTM. Rank stocks with Div Yield TTM > 1% in `Universe.DollarVolume.Top(800)`. Long stocks with low, sustainable payout (bottom quintile, e.g., < 40%), short stocks with high payout (top quintile, e.g., > 80% or negative OCF). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0167", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Magic Formula Top 50 Universe': Select top 50 stocks based on combined ranks of Earnings Yield (EBIT/EV TTM) and ROIC TTM from `Universe.DollarVolume.Top(3000)`. Invest equally in these 50 stocks. Rebalance quarterly. Add rule to exit if ROIC TTM turns negative."}
{"prompt_id": "FA-H-0168", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing rotation between 'Small Caps ETF' (e.g., IWM) and 'Large Caps ETF' (e.g., SPY) based on yield curve slope: If 10Y-2Y Treasury spread (fetch via `Quandl`) is steepening (> 50bps and rising > 5bps/month), overweight Small Caps. If flattening/inverting (< 20bps and falling > 5bps/month), overweight Large Caps. Use fundamental filters (e.g., positive ROE TTM) within each size category if not using ETFs. Check condition monthly, rebalance monthly."}
{"prompt_id": "FA-H-0169", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks using ' Piotroski F-Score AND Low P/E': Select stocks from `Universe.DollarVolume.Top(1200)` with Piotroski F-Score >= 8 AND P/E ratio TTM < 15. Invest equally in all qualifying stocks (max 40), rebalance annually."}
{"prompt_id": "FA-H-0170", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm for a long-short strategy based on 'Relative Valuation within Industry': For each stock, calculate its P/E ratio TTM divided by its GICS Industry median P/E TTM. Rank stocks in `Universe.DollarVolume.Top(1000)` based on this relative P/E. Long bottom quintile (cheap vs peers), short top quintile (expensive vs peers). Dollar neutral, rebalance monthly."}
{"prompt_id": "FA-H-0171", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting 'Growth at a Discount to Peers': Select stocks from `Universe.QC500` with EPS Growth TTM > 15%. From this group, select those whose P/E ratio TTM is below their GICS SubIndustry median P/E TTM. Invest equally in the top 25 based on highest EPS Growth TTM, rebalance quarterly."}
{"prompt_id": "FA-H-0172", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining 'Dividend Yield' and 'Low Volatility': Select stocks from `Universe.DollarVolume.Top(1000)` with Dividend Yield TTM > 3% AND 1-year price volatility in the bottom 30%. Select the top 30 based on highest yield, weighted by inverse volatility. Rebalance quarterly. Exit if payout ratio TTM exceeds 90%."}
{"prompt_id": "FA-H-0173", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for sector rotation based on 'Forward P/E Relative to History': Calculate the current average Forward P/E for each GICS sector and compare it to the sector's 3-year average Forward P/E. Invest equally in the 2 sectors trading at the largest discount using sector ETFs. Rebalance monthly. (Requires estimate data)."}
{"prompt_id": "FA-H-0174", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Improving ROIC': Select stocks from `Universe.DollarVolume.Top(800)` where ROIC TTM > ROIC Previous TTM AND ROIC TTM > 10%. Select top 30 based on the magnitude of the ROIC TTM increase (YoY change). Weight by market cap, rebalance quarterly."}
{"prompt_id": "FA-H-0175", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Concentrated Quality' portfolio: Calculate a Quality score (ROE TTM rank, D/E TTM rank, Gross Margin TTM rank, FCF Yield TTM rank). Select the absolute top 15 stocks based on this score from `Universe.QC500`. Invest equally (approx 6.7% each). Rebalance quarterly. Add stop loss using `RiskManagementModel` if D/E ratio TTM doubles from entry."}
{"prompt_id": "FA-H-0176", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Cash Conversion Cycle (CCC) Change': Calculate the YoY change in CCC TTM. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long stocks with largest decrease in CCC (bottom quintile, improving efficiency), short stocks with largest increase (top quintile, worsening efficiency). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0177", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Undervalued REITs': Focus on REIT universe (filter by GICS). Select REITs trading below their 3-year average Price/FFO ratio TTM AND have FFO Growth TTM > 5%. Select top 10 based on highest current Dividend Yield TTM. Equal weight, rebalance quarterly. (FFO is Funds From Operations TTM)."}
{"prompt_id": "FA-H-0178", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Smart Beta - Value': Rank stocks in `Universe.QC500` based on a composite Value score (P/E, P/B, P/S, Div Yield ranks - all TTM). Select top 30%. Weight stocks within the portfolio based on their Value score (higher score = higher weight), subject to diversification constraints (max 5% per stock). Rebalance quarterly."}
{"prompt_id": "FA-H-0179", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Greenblatt Earnings Yield & ROIC Rank Sum': Calculate rank for Earnings Yield (EBIT/EV TTM) and rank for ROIC TTM. Sum the ranks (lower sum is better). Select the 40 stocks with the lowest rank sum from `Universe.DollarVolume.Top(1500)`. Invest equally, rebalance quarterly."}
{"prompt_id": "FA-H-0180", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Risk-Adjusted Returns': Calculate the Sharpe Ratio (using monthly returns over 1 year) for each GICS sector ETF. Invest equally in the top 3 sectors based on Sharpe Ratio. Rebalance monthly. Combines price action with sector concept."}
{"prompt_id": "FA-H-0181", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Analyst Target Price Upside': Calculate Upside = (Mean Analyst Target Price / Current Price) - 1. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long top quintile (high upside), short bottom quintile (low/negative upside). Dollar neutral, rebalance monthly. (Requires estimate/target price data)."}
{"prompt_id": "FA-H-0182", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Small Cap Quality Compounders': Universe: Market Cap $250M - $3B using `CoarseFundamental`. Require ROE TTM > 15%, D/E TTM < 0.75, and 3-Year Revenue CAGR > 10%. Select top 25 based on highest ROE TTM. Weight by inverse volatility (90-day), rebalance quarterly. Filter using `Fundamental`/`CoarseFundamental`."}
{"prompt_id": "FA-H-0183", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using 'Revenue Surprise Momentum': Select stocks from `Universe.DollarVolume.Top(800)` that reported positive revenue surprise in the last quarter AND positive revenue surprise in the quarter before that. From this group, select top 30 based on magnitude of latest surprise %. Equal weight, rebalance quarterly. (Requires estimate data)."}
{"prompt_id": "FA-H-0184", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Enterprise Value / FCF': Rank stocks in `Universe.QC500` by lowest EV / FCF TTM ratio. Also require positive FCF growth YoY. Select lowest quintile. Weight positions by FCF Yield (FCF TTM/MarketCap), rebalance quarterly."}
{"prompt_id": "FA-H-0185", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Low Volatility Factor' portfolio with quality screen: Rank stocks in `Universe.DollarVolume.Top(1000)` by lowest 252-day volatility. Select the lowest quintile. From this group, filter out stocks with ROE TTM < 5% or negative EPS TTM. Invest in the remaining, weighted by inverse volatility. Rebalance quarterly."}
{"prompt_id": "FA-H-0186", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Change in Gross Profit / Assets': Calculate Gross Profit TTM / Average Total Assets TTM. Rank stocks based on the YoY change in this ratio within `Universe.DollarVolume.Top(1200)`. Long top quintile (improving profitability relative to assets), short bottom quintile (deteriorating). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0187", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Dividend Growth Champions': Require 15+ years of consecutive dividend increases (proxy/filter needed), 5-Year Dividend CAGR > 7%, Payout Ratio TTM < 60%, AND D/E TTM < 1. Select top 20 based on highest current yield TTM from `Universe.QC500`. Equal weight, rebalance annually."}
{"prompt_id": "FA-H-0188", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Momentum & Value Interaction': Create independent rankings for 6M Momentum and Value (P/E TTM, P/B TTM ranks). Select stocks that are in the top 40% by Momentum AND top 40% by Value within `Universe.DollarVolume.Top(1000)`. Invest equally in qualifying stocks, rebalance monthly."}
{"prompt_id": "FA-H-0189", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Price / Net Operating Assets': Calculate Net Operating Assets (NOA TTM) as per prompt 77. Rank stocks in `Universe.DollarVolume.Top(1000)` by lowest Market Cap / NOA TTM ratio. Also require positive ROE TTM. Select lowest decile. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0190", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing industry rotation within Energy: Calculate average Operating Cash Flow Yield (OCF TTM/MarketCap) for GICS sub-industries (e.g., Integrated Oil & Gas, E&P, Equipment & Services). Invest equally in the single sub-industry with the highest OCF yield AND positive YoY OCF growth TTM, using the top 3 market cap stocks within that sub-industry. Rebalance quarterly."}
{"prompt_id": "FA-H-0191", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Change in R&D Intensity': Calculate R&D Intensity = R&D Expense TTM / Revenue TTM. Rank stocks in Tech/Healthcare based on the YoY percentage point change in this intensity. Long stocks with decreasing intensity (bottom quintile, potentially more efficient R&D spending), short stocks with rapidly increasing intensity (top quintile). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0192", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Quality Small Caps with Low Leverage': Universe: Market Cap $200M - $2B using `CoarseFundamental`. Require ROA TTM > 10%, D/E TTM < 0.5, and positive FCF TTM. Select top 30 based on highest ROA TTM. Weight equally, rebalance quarterly. Filter using `Fundamental`/`CoarseFundamental`."}
{"prompt_id": "FA-H-0193", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using 'Graham & Dodd P/E Screen': Select stocks from `Universe.DollarVolume.Top(1000)` where P/E ratio TTM < 1 / (2 * Current_AAA_Corporate_Bond_Yield) (requires bond yield data via `Quandl`). Also require Current Ratio TTM > 2 and D/E TTM < 1. Invest equally in qualifying stocks (max 30), rebalance annually."}
{"prompt_id": "FA-H-0194", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Improving Margins & Sales Growth': Require Gross Margin TTM > Gross Margin Previous TTM, Operating Margin TTM > Operating Margin Previous TTM, AND Revenue Growth TTM > 5%. Select top 40 from `Universe.QC500` based on highest Revenue Growth TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0195", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Global Value' portfolio using ADRs: Rank available ADRs meeting volume criteria by a composite Value score (P/E TTM, P/B TTM, EV/EBITDA TTM ranks). Select the top 25 ADRs. Weight by inverse volatility (120-day), rebalance quarterly. Add filter for positive ROE TTM."}
{"prompt_id": "FA-H-0196", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Asset Turnover Efficiency': Rank stocks by Asset Turnover TTM (Sales TTM / Average Total Assets TTM). Long top quintile (high efficiency), short bottom quintile (low efficiency) within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0197", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Magic Formula excluding Financials and Utilities': Apply Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) to `Universe.DollarVolume.Top(1500)`, but exclude stocks in Financials and Utilities GICS sectors using `sector_template`. Select top 40 from the remaining universe. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0198", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script performing rotation between 'Growth Sectors' and 'Defensive Sectors' based on ISM Manufacturing Index: If ISM PMI (fetch via `Quandl`) is above 50 and rising (current > 3-month avg), overweight Growth sectors (XLK, XLY). If below 50 and falling (current < 3-month avg), overweight Defensive sectors (XLU, XLP, XLV). Use sector ETFs. Check condition monthly, rebalance monthly."}
{"prompt_id": "FA-H-0199", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks using 'Lakonishok Value Score': Combine ranks for P/B TTM (low), P/E TTM (low), Price/Cash Flow TTM (P/CF, low), and Dividend Yield TTM (high). Select top decile from `Universe.QC500`. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0200", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm for a long-short strategy based on 'Net Insider Buying Value': Calculate value of net insider buys over last 6 months / Market Cap. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long top quintile, short bottom quintile (net selling). Dollar neutral, rebalance quarterly. (Requires Tiingo Forms 4 data or placeholder)."}
{"prompt_id": "FA-H-0201", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting 'Quality at a Reasonable Yield': Require ROE TTM > 12%, D/E TTM < 1, AND Dividend Yield TTM > 2.5%. Select top 30 from `Universe.DollarVolume.Top(800)` based on lowest Payout Ratio TTM. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0202", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm combining 'Piotroski Score' and 'Momentum': Select stocks from `Universe.DollarVolume.Top(1200)` with Piotroski F-Score >= 7. From this subset, select the top 50% based on 6-month price momentum. Weight by inverse volatility (90-day), rebalance quarterly."}
{"prompt_id": "FA-H-0203", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for sector rotation based on 'Operating Leverage Changes': Calculate the average YoY change in DOL (Degree of Operating Leverage) TTM for each GICS sector. Invest equally in the 2 sectors with the most favorable change (e.g., increasing DOL in expected recovery) using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0204", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Cash Flow Adequacy': Calculate (OCF TTM / (CapEx TTM + Dividends Paid TTM + Debt Repaid TTM)). Select stocks from `Universe.QC500` where this ratio > 1.1 (cash flow covers needs). Also require positive revenue growth TTM. Select top 30 based on highest OCF Yield TTM. Equal weight, rebalance quarterly. *Debt Repaid might need estimation.*"}
{"prompt_id": "FA-H-0205", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Concentrated Value' portfolio: Rank stocks by composite Value score (P/E TTM, P/B TTM, P/S TTM ranks) in `Universe.DollarVolume.Top(1000)`. Select the absolute top 15 stocks. Invest equally (~6.7% each). Rebalance quarterly. Add rule using `RiskManagementModel` to liquidate if P/E TTM goes above 30."}
{"prompt_id": "FA-H-0206", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Return on Equity Trend': Calculate the 3-year slope of the annual ROE trend using linear regression. Rank stocks in `Universe.QC500`. Long top quintile (strong positive ROE trend), short bottom quintile (negative ROE trend). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0207", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Small Cap Turnarounds': Universe: Market Cap $100M - $1.5B using `CoarseFundamental`. Require Negative EPS Previous Year TTM, Positive EPS TTM, Improving Gross Margin YoY, AND Debt Reduction YoY. Select top 20 based on magnitude of EPS improvement (TTM EPS - Previous Year EPS). Equal weight, rebalance quarterly. Filter using `Fundamental`/`CoarseFundamental`."}
{"prompt_id": "FA-H-0208", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Smart Beta - Quality': Rank stocks in `Universe.QC500` based on a composite Quality score (ROE TTM, ROA TTM, D/E TTM, Margin Stability ranks). Select top 30%. Weight stocks by their Quality score, subject to max 5% per stock. Rebalance quarterly."}
{"prompt_id": "FA-H-0209", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'FCF Growth and Stability': Require 3-Year FCF CAGR > 10% AND Standard Deviation of annual FCF over 3 years / Average FCF over 3 years < 0.5. Select top 30 from `Universe.DollarVolume.Top(1000)` based on highest FCF Yield TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0210", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing industry rotation within Financials: Calculate average Net Interest Margin (NIM) TTM change YoY for GICS sub-industries (Banks, Insurance, Diversified Financials). Invest equally in the single sub-industry with the most positive NIM change AND ROE TTM > 8%, using the top 5 market cap stocks in that sub-industry. Rebalance quarterly."}
{"prompt_id": "FA-H-0211", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Earnings Quality (OCF/NI) Trend': Calculate Ratio = OCF TTM / Net Income TTM. Rank stocks based on the YoY change in this ratio within `Universe.DollarVolume.Top(1000)`. Long top quintile (improving earnings quality), short bottom quintile (deteriorating quality). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0212", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'ESG Improvers with Value': Select stocks from `Universe.QC500` showing significant improvement in composite ESG scores over the past year (external data/placeholder required) AND trading in the bottom 40% by P/E ratio TTM. Invest equally in top 25 based on magnitude of ESG improvement, rebalance semi-annually."}
{"prompt_id": "FA-H-0213", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script combining 'Low Beta' and 'High Quality': Select stocks from `Universe.DollarVolume.Top(1000)` in the lowest quintile by 1-year Beta. From this subset, select those with ROIC TTM > 12% and D/E TTM < 1. Invest in top 30 based on highest ROIC TTM. Weight by inverse Beta, rebalance quarterly."}
{"prompt_id": "FA-H-0214", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm implementing 'Dynamic Weighting Value': Select top quintile Value stocks (P/E TTM, P/B TTM ranks) from `Universe.QC500`. Instead of equal weight, weight positions based on the strength of their value score (e.g., weight = (1 / PE_rank) * (1 / PB_rank), normalized). Rebalance quarterly."}
{"prompt_id": "FA-H-0215", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm selecting stocks based on 'Altman Z-Score AND Value': Select stocks from `Universe.DollarVolume.Top(1500)` with Altman Z-Score > 2.99 (safe zone) AND P/B ratio TTM < 1.5. Invest equally in qualifying stocks (max 50), rebalance semi-annually."}
{"prompt_id": "FA-H-0216", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Change in Shares Outstanding': Rank stocks by YoY % change in shares outstanding TTM. Long stocks with significant reduction (buybacks, bottom quintile), short stocks with significant increase (dilution, top quintile) within `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0217", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'High Dividend Yield REITs with Safety': Focus on REIT universe. Select REITs with Dividend Yield TTM > 4%, FFO Payout Ratio TTM (Dividends/FFO TTM) < 80%, AND Debt / EBITDA TTM < 6x. Select top 15 based on highest yield TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0218", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Smart Beta - Growth': Rank stocks in `Universe.QC500` based on composite Growth score (Rev Growth TTM, EPS Growth TTM, FCF Growth TTM ranks). Select top 30%. Weight stocks by their Growth score, subject to max 5% per stock. Rebalance monthly."}
{"prompt_id": "FA-H-0219", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Sustainable Growth Rate (SGR) and Value': Calculate SGR = ROE TTM * (1 - Payout Ratio TTM). Select stocks from `Universe.DollarVolume.Top(1000)` where SGR > 5% AND P/E ratio TTM < 20 AND P/B ratio TTM < 2. Select top 40 based on highest SGR. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0220", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Relative P/B vs History': Calculate current average P/B TTM for each GICS sector relative to its 10-year average P/B TTM. Invest equally in the 2 sectors trading at the largest discount using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0221", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Inventory / Sales Ratio Trend': Calculate Ratio = Average Inventory TTM / Sales TTM. Rank stocks based on YoY change in this ratio within Consumer Discretionary/Staples. Long bottom quintile (decreasing ratio, better efficiency), short top quintile (increasing ratio, potential issues). Dollar neutral, quarterly rebalance."}
{"prompt_id": "FA-H-0222", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Quality GARP Small Caps': Universe: Market Cap $200M-$2.5B using `CoarseFundamental`. Require ROE TTM > 15%, D/E TTM < 1, EPS Growth TTM > 10%, AND P/E TTM < 25. Select top 25 based on lowest (P/E TTM / EPS Growth TTM) ratio. Equal weight, rebalance monthly. Filter using `Fundamental`/`CoarseFundamental`."}
{"prompt_id": "FA-H-0223", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script combining 'Analyst Revisions' and 'Value': Select stocks from `Universe.DollarVolume.Top(800)` with positive consensus EPS estimate revisions over last 3 months AND P/E TTM < GICS Sector Median P/E TTM. Invest equally in top 30 based on magnitude of estimate revision %. Rebalance monthly. (Requires estimate data)."}
{"prompt_id": "FA-H-0224", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Cash Return On Capital Invested (CROCI) > WACC': Calculate CROCI (OCF TTM / Average (Total Equity + Total Debt - Cash)) and estimate WACC (Weighted Average Cost of Capital - simplified estimation acceptable). Select stocks from `Universe.QC500` where CROCI TTM > WACC + 2% AND CROCI TTM > 0. Select top 30 based on highest CROCI spread. Equal weight, rebalance quarterly. *Note: WACC estimation is complex.*"}
{"prompt_id": "FA-H-0225", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Risk-Weighted Quality' portfolio: Select top quintile Quality stocks (ROE TTM, D/E TTM, Margin ranks) from `Universe.QC500`. Weight positions inversely proportional to their 90-day price volatility. Rebalance quarterly. Max position size 7%."}
{"prompt_id": "FA-H-0226", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Change in Financial Leverage': Calculate Financial Leverage = Average Total Assets TTM / Average Total Equity TTM. Rank stocks based on YoY change in this ratio within `Universe.DollarVolume.Top(1000)`. Long stocks with decreasing leverage (bottom quintile), short stocks with rapidly increasing leverage (top quintile). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0227", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Deep Value Screen (Low P/B, Low P/S, Low EV/EBITDA)': Select stocks from `Universe.DollarVolume.Top(1200)` in the bottom quintile for P/B TTM, bottom quintile for P/S TTM, AND bottom quintile for EV/EBITDA TTM. Also require positive OCF TTM. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0228", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Smart Beta - Dividend Yield': Rank stocks in `Universe.QC500` by Dividend Yield TTM. Select top 30%, filtering out those with Payout Ratio TTM > 80% or negative EPS growth TTM. Weight stocks by their Dividend Yield TTM, subject to max 5% per stock. Rebalance quarterly."}
{"prompt_id": "FA-H-0229", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Improving ROA and Low P/B': Require ROA TTM > ROA Previous TTM AND ROA TTM > 5% AND P/B ratio TTM < 1.5. Select top 35 from `Universe.DollarVolume.Top(1000)` based on magnitude of ROA TTM improvement. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0230", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing rotation between 'Value', 'Growth', and 'Quality' based on market regime (Volatility): If VIX (Quandl) < 15, overweight Growth factor portfolio. If 15 <= VIX < 25, overweight Quality factor portfolio. If VIX >= 25, overweight Value factor portfolio. Define factor portfolios (top quintiles) from `Universe.QC500`. Check VIX daily, rebalance portfolio allocation monthly."}
{"prompt_id": "FA-H-0231", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Days Payable Outstanding (DPO) Trend': Calculate YoY change in DPO TTM. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long stocks with increasing DPO (top quintile, stretching payables), short stocks with decreasing DPO (bottom quintile, paying faster). Dollar neutral, rebalance quarterly. *Interpretation can vary.*"}
{"prompt_id": "FA-H-0232", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Global Quality Leaders' using ADRs: Rank available ADRs meeting volume criteria by a composite Quality score (ROIC TTM rank, D/E TTM rank, Gross Margin TTM rank). Select the top 20 ADRs. Weight by Quality score, rebalance quarterly. Filter for positive FCF TTM."}
{"prompt_id": "FA-H-0233", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using 'Net Debt / EBITDA Filter': Select stocks from `Universe.DollarVolume.Top(1000)` where Net Debt / EBITDA TTM < 3. From this group, select the top 50 based on highest FCF Yield TTM. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0234", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Consistent High ROIC': Require ROIC TTM > 15% for each of the last 3 consecutive years TTM. Select all qualifying stocks from `Universe.QC500`. Weight by inverse volatility (180-day), rebalance semi-annually."}
{"prompt_id": "FA-H-0235", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm creating a 'Fundamental Momentum' portfolio: Calculate score based on 6M change in ROE rank, 6M change in EPS Growth rank, and 6M change in Revenue Growth rank. Select top decile from `Universe.DollarVolume.Top(1000)`. Weight by score, rebalance quarterly."}
{"prompt_id": "FA-H-0236", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'EV/Sales Relative to Industry': Calculate each stock's EV/Sales TTM relative to its GICS Industry median EV/Sales TTM. Rank stocks in `Universe.DollarVolume.Top(1200)` based on this relative multiple. Long bottom quintile (cheap vs peers), short top quintile (expensive vs peers). Dollar neutral, rebalance monthly."}
{"prompt_id": "FA-H-0237", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'Low Volatility Dividend Growers': Select stocks from `Universe.DollarVolume.Top(1000)` in lowest quintile by 1-year volatility AND 5-Year Dividend CAGR > 6% AND Payout Ratio TTM < 70%. Select top 25 based on current yield TTM. Weight by yield, rebalance quarterly."}
{"prompt_id": "FA-H-0238", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Mean Reversion Value': Select stocks from `Universe.DollarVolume.Top(1000)` whose current P/E ratio TTM is below its 5-year average P/E TTM by at least one standard deviation. Also require positive ROE TTM. Select top 30 based on largest P/E TTM discount. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0239", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Magic Formula & Piotroski Combo': Select top quintile based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. From this subset, select only those with Piotroski F-Score >= 6. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0240", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Inventory Levels Trend': Calculate the average YoY change in (Average Inventory TTM / Sales TTM) ratio for each GICS sector (focus on relevant sectors like Consumer Goods, Industrials). Invest equally in the 2 sectors showing the most favorable trend (decreasing ratio) using sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0241", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm for a long-short strategy based on 'Accrual Ratio (Cash Flow Version)': Calculate Accrual Ratio = (Net Income TTM - OCF TTM) / Average Total Assets TTM. Rank stocks in `Universe.DollarVolume.Top(1000)`. Long bottom quintile (low accruals), short top quintile (high accruals). Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0242", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm selecting 'High Quality REITs': Focus on REIT universe. Require Investment Grade credit rating (external data/placeholder), Debt/EBITDA TTM < 5.5x, AND positive FFO Growth TTM. Select top 10 based on highest ROE TTM. Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0243", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing 'Smart Beta - Low Volatility': Rank stocks in `Universe.QC500` by lowest 252-day volatility. Select lowest 30%. Weight stocks by inverse volatility, subject to max 5% per stock. Rebalance quarterly. Add filter for positive EPS TTM."}
{"prompt_id": "FA-H-0244", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'High ROE, High Reinvestment': Require ROE TTM > 18% AND Reinvestment Rate TTM (1 - Payout Ratio TTM) > 50%. Select top 30 from `Universe.DollarVolume.Top(800)` based on highest expected growth (ROE TTM * Reinvestment Rate TTM). Equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0245", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm calculating a 'Dynamic GARP Score'. Score = (EPS Growth TTM Rank) / (PE Ratio Rank). If market volatility (e.g., VIX proxy > 25, fetched via custom data or Quandl), adjust score = (0.5 * EPS Growth Rank + 0.5 * ROE Rank) / PE Ratio Rank. Select top quintile from `Universe.QC500`, equal weight, rebalance quarterly."}
{"prompt_id": "FA-H-0246", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Fundamental Momentum Discrepancy'. Calculate score = (Rank of 3M change in ROE) + (Rank of 3M change in Revenue Growth) - (Rank of 6M Price Momentum). Long top quintile (strong fundamentals outpacing price), short bottom quintile. Universe `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0247", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a `PortfolioConstructionModel`. Input: Stocks selected by top decile Piotroski F-Score (>=8) from `Universe.QC500`. Action: Weight holdings based on (Fundamental Score * Inverse 60-day Volatility). Calculate Fundamental Score = FScore * (1 / DE_Ratio TTM). Normalize weights, max 5% per holding. Rebalance monthly."}
{"prompt_id": "FA-H-0248", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing sector rotation based on 'Relative Fundamental Strength vs History'. For each GICS sector, calculate Z-score of current average ROE TTM relative to its 5-year historical distribution of monthly average ROE. Invest equally in the 2 sectors with the highest positive Z-score using representative sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0249", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing multi-stage filtering & ranking: Stage 1: `Universe.DollarVolume.Top(1500)`. Stage 2: Filter for D/E TTM < 1.5 AND ROA TTM > 5%. Stage 3: Rank remaining by composite score (50% FCF Yield TTM Rank + 50% Rev Growth TTM Rank). Stage 4: Select top 50. Stage 5: Weight by FCF Yield TTM. Rebalance quarterly."}
{"prompt_id": "FA-H-0250", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm with conditional investment based on fundamental state: For `Universe.QC500` stocks: If ROE TTM > 15% AND P/E TTM < 20, allocate 4% target weight. If 10% < ROE TTM <= 15% AND P/E TTM < 15, allocate 2% target weight. Use `EqualWeightingPortfolioConstructionModel` but adjust target weights based on these rules during rebalance calculation. Rebalance monthly. Max total holdings: 40."}
{"prompt_id": "FA-H-0251", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm using a 'Cross-Sectional Value' score: Score = (Stock P/E TTM / GICS Industry Median P/E TTM) + (Stock P/B TTM / GICS Industry Median P/B TTM). Rank stocks in `Universe.DollarVolume.Top(1000)` by lowest score (cheapest relative to peers). Select bottom decile. Weight inversely by score (lower score = higher weight). Rebalance monthly."}
{"prompt_id": "FA-H-0252", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a long-short strategy based on 'Operating Efficiency Deviation'. Calculate score = (Asset Turnover TTM Rank) + (Inventory Turnover TTM Rank) - (Days Sales Outstanding TTM Rank). Rank stocks within `Universe.DollarVolume.Top(800)`. Long top quintile, short bottom quintile. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0253", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm implementing a `RiskManagementModel`. Logic: Monitor all holdings daily. If any holding's D/E ratio TTM increases by 50% compared to its value at purchase OR its quarterly revenue growth turns negative YoY for two consecutive quarters, liquidate the position immediately. Main strategy: Invest equally in top 30 stocks by ROIC TTM from `Universe.QC500` (rebalanced quarterly)."}
{"prompt_id": "FA-H-0254", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing rotation between Quality, Value, and Momentum factors based on Yield Curve slope (10Y-2Y spread, fetched via Quandl). Steepening (>100bps): 60% Quality, 20% Value, 20% Mom. Flattening (0-100bps): 40% Quality, 40% Value, 20% Mom. Inverted (<0bps): 20% Quality, 60% Value, 20% Mom. Define factor portfolios (top quintiles) from `Universe.QC500`. Check slope monthly, rebalance factor allocations monthly."}
{"prompt_id": "FA-H-0255", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting stocks based on 'Non-Linear Quality Score': Score = (ROE_TTM_Rank^1.5) * (1 / DE_Ratio_TTM_Rank^0.5) * Margin_Stability_Rank. Select top decile from `Universe.DollarVolume.Top(1000)`. Weight by score, rebalance quarterly. Margin Stability = low std dev of quarterly gross margin over 3 yrs."}
{"prompt_id": "FA-H-0256", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy using 'Analyst Estimate Revision Breadth & Magnitude'. Score = (% of Analysts Revising EPS Up Last 3M) * (Avg % Magnitude of Upward Revisions). Rank stocks in `Universe.DollarVolume.Top(800)`. Long top 15%, short bottom 15%. Dollar neutral, rebalance monthly. (Requires estimate data integration, e.g., Zacks or IBES via QuantConnect dataset)."}
{"prompt_id": "FA-H-0257", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script using custom data: Assume `CustomData.MyFundamentalScores` provides 'ESGScore' and 'ControversyScore'. Select stocks from `Universe.QC500` with ESGScore > 70 AND ControversyScore < 30. From this subset, select top 20 based on highest ROIC TTM. Equal weight, rebalance semi-annually. Structure algorithm to load and use this custom data type."}
{"prompt_id": "FA-H-0258", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm with dynamic rebalancing triggers: Select top quintile Value stocks (P/E TTM, P/B TTM ranks) from `Universe.QC500`. Rebalance a specific holding only if its P/E ratio TTM deviates by +/- 30% from the average P/E of the selected quintile at the last rebalance date OR if its Piotroski score drops below 5. Check conditions weekly via `Schedule.Event`, standard rebalance quarterly otherwise using `Schedule.On`."}
{"prompt_id": "FA-H-0259", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm constructing a 'Fundamental Risk Parity' portfolio: Define 3 'factor assets': Value (low P/B basket), Quality (high ROE basket), Growth (high Rev Growth basket) from `Universe.QC500`. Estimate covariance matrix based on fundamental time series (e.g., quarterly changes in average factor scores for basket holdings). Allocate weights to achieve equal fundamental risk contribution from each factor. Rebalance quarterly. *Note: Highly complex, requires careful time series construction and optimization setup.*"}
{"prompt_id": "FA-H-0260", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting stocks based on 'Cash Flow Quality & Value': Require OCF TTM > Net Income TTM AND FCF TTM > 0. From this quality subset in `Universe.DollarVolume.Top(1000)`, select the bottom quintile based on EV/FCF TTM ratio. Weight by FCF Yield TTM, rebalance quarterly."}
{"prompt_id": "FA-H-0261", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Capital Allocation Efficiency': Calculate Score = ROIC TTM Rank - (YoY % Change in Total Assets Rank). Long stocks with high ROIC and low asset growth (efficient, top quintile score), short stocks with low ROIC and high asset growth (inefficient, bottom quintile score). Universe: `Universe.QC500`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0262", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a `PortfolioConstructionModel` for sector neutrality: Input: Top 15% stocks selected by composite Quality score (ROE, D/E, Margin ranks) from `Universe.DollarVolume.Top(1000)`. Action: Optimize portfolio weights to match the GICS sector weights of the initial `Universe.DollarVolume.Top(1000)` universe (or a benchmark like SPY), while maximizing exposure to the Quality score. Use an optimization library accessible within LEAN. Rebalance monthly."}
{"prompt_id": "FA-H-0263", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm with conditional sector weighting based on fundamentals: Calculate average P/E for Tech sector and Utilities sector monthly. If Tech_PE > 1.5 * Utilities_PE, set target weight for Utilities sector ETF to 1.5x its benchmark weight and Tech sector ETF to 0.5x its benchmark weight. Adjust other sector weights proportionally. Apply within a broader multi-sector ETF portfolio. Rebalance monthly based on the condition."}
{"prompt_id": "FA-H-0264", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing 'Paired Factor Rotation': Track performance of Value vs Growth factors (using top/bottom quintile simulated portfolios from `Universe.QC500`). If Value outperforms Growth over last 3 months (cumulative return), invest 70% in Value portfolio, 30% in Growth. If Growth outperforms, reverse the allocation. Rebalance factor allocations monthly based on relative performance trigger."}
{"prompt_id": "FA-H-0265", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting stocks based on 'Accelerating Fundamental Momentum': Require (Revenue Growth TTM > Revenue Growth Previous TTM) AND (EPS Growth TTM > EPS Growth Previous TTM) AND (ROE TTM > ROE Previous TTM). Select qualifying stocks from `Universe.DollarVolume.Top(800)`. Weight by the average magnitude of the percentage point increase across the three metrics. Rebalance quarterly. Max 30 stocks."}
{"prompt_id": "FA-H-0266", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy using 'Financial Distress Prediction Trend': Calculate Altman Z-Score quarterly. Rank stocks by the 1-year change in Z-Score within `Universe.DollarVolume.Top(1200)`. Long stocks with largest Z-Score increase (improving health, top quintile), short stocks with largest decrease (worsening health, bottom quintile). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0267", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a `RiskManagementModel` based on fundamental volatility: Calculate the standard deviation of quarterly ROE over the past 3 years for each holding. If this 'fundamental volatility' exceeds a dynamic threshold (e.g., > 1.5x the universe median fundamental volatility), reduce the position size by 50%. Check quarterly. Main strategy: Invest in top 40 stocks by dividend yield (rebalanced quarterly)."}
{"prompt_id": "FA-H-0268", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm using 'Dynamic Threshold Value Investing': Select stocks from `Universe.QC500` where P/E TTM < (0.8 * GICS Sector Median P/E TTM) AND P/B TTM < (0.8 * GICS Sector Median P/B TTM). Select all qualifying stocks. Weight by inverse P/E TTM ratio. Rebalance monthly as sector medians change."}
{"prompt_id": "FA-H-0269", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm for a 'Quality Dividend Growth' strategy: Require ROIC TTM > 15%, D/E TTM < 1, 5-Year Dividend CAGR > 8%, AND Payout Ratio TTM < 60%. Select top 20 stocks from `Universe.DollarVolume.Top(1000)` based on highest 5-year dividend growth rate. Weight equally, rebalance annually."}
{"prompt_id": "FA-H-0270", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using 'Multi-Stage Growth Screen': Stage 1: `Universe.DollarVolume.Top(1000)`. Stage 2: Filter Rev Growth TTM > 15% AND EPS Growth TTM > 15%. Stage 3: Filter ROE TTM > GICS Industry Median ROE TTM. Stage 4: Select top 30 based on highest 3-Year Sales CAGR. Stage 5: Weight by Market Cap. Rebalance monthly."}
{"prompt_id": "FA-H-0271", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Intangible Value Factor': Estimate Intangible Value = Market Cap - Tangible Book Value. Calculate Intangible Value / Sales TTM. Rank stocks in Technology and Healthcare sectors. Long stocks with potentially undervalued intangibles (bottom quintile ratio), short stocks with potentially overvalued intangibles (top quintile ratio). Dollar neutral, rebalance quarterly. *Interpretation and Tangible BV calculation required.*"}
{"prompt_id": "FA-H-0272", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a 'Low Volatility Anomaly with Yield Tilt': Select stocks from `Universe.QC500` in the lowest quintile of 1-year price volatility. From this subset, select the top 60% based on highest Dividend Yield TTM, requiring Yield > 1%. Weight by dividend yield. Rebalance quarterly."}
{"prompt_id": "FA-H-0273", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm implementing a `PortfolioConstructionModel` that overweights stocks with recent positive fundamental *surprises*. Input: Stocks selected by top 20% Quality Score from `Universe.QC500`. Action: Identify stocks within this set that also reported positive EPS surprise AND positive Revenue surprise last quarter (requires estimate data). Increase target weights of these 'double surprise' stocks by 1.5x relative to others, then normalize all weights. Rebalance monthly."}
{"prompt_id": "FA-H-0274", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm performing sector rotation based on 'Composite Valuation Z-Score': For each GICS sector, calculate Z-scores for its average P/E, P/B, and P/S TTM relative to its own 5-year history. Average the Z-scores. Invest equally in the 2 sectors with the lowest average Z-score (most undervalued vs history) using representative sector ETFs. Rebalance quarterly."}
{"prompt_id": "FA-H-0275", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting 'Consistent Compounders': Require positive EPS growth TTM in each of the last 5 consecutive years AND average ROE TTM over 5 years > 15% AND D/E TTM < 1. Select top 25 from `Universe.DollarVolume.Top(800)` based on lowest P/E TTM. Weight equally, rebalance annually."}
{"prompt_id": "FA-H-0276", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Changes in Working Capital Efficiency': Calculate Working Capital Turnover = Sales TTM / Average Working Capital TTM (Avg WC = Avg(Current Assets - Current Liabilities)). Rank stocks based on the YoY change in this turnover ratio. Long stocks with increasing turnover (top quintile, improving efficiency), short stocks with decreasing turnover (bottom quintile). Universe: `Universe.DollarVolume.Top(1000)`. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0277", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a `RiskManagementModel` based on sector concentration and fundamentals: Monitor portfolio daily. If the total weight of any GICS sector exceeds 25% AND the average D/E ratio TTM of holdings within that sector exceeds 1.5, reduce positions in that sector proportionally (selling highest D/E stocks first) to bring weight below 25%. Main strategy: Multi-factor selection across all sectors, rebalanced monthly."}
{"prompt_id": "FA-H-0278", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm using 'Economic Moat Score': Score = (0.3*Gross Margin Rank) + (0.3*ROIC Rank) + (0.2*Earnings Consistency Rank) + (0.2*Low CapEx/Sales Rank). Select top 15% from `Universe.QC500` based on this weighted score. Weight portfolio holdings by score, rebalance semi-annually. Consistency = Low std dev of annual EPS over 5 yrs."}
{"prompt_id": "FA-H-0279", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm dynamically blending Value and Momentum: Calculate Value Score (P/E TTM, P/B TTM ranks) and Momentum Score (6M Price). If Momentum factor has outperformed Value factor over last 3 months (using simulated factor portfolio returns), Portfolio Score = 0.7*Mom_Score + 0.3*Val_Score. Else, Portfolio Score = 0.3*Mom_Score + 0.7*Val_Score. Select top quintile by Portfolio Score from `Universe.DollarVolume.Top(1000)`. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0280", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm selecting based on 'Net Operating Assets (NOA) Decomposition Quality': Calculate NOA = (Operating Assets - Operating Liabilities). Select stocks where Change in NOA TTM is low (bottom quintile relative to Avg Total Assets) AND the ratio (Change in Operating Assets / Change in NOA) is positive and high (e.g. > 0.7), indicating accruals driven by real operations not just liability changes. Universe: `Universe.DollarVolume.Top(1200)`. Select top 30 low-accrual stocks meeting criteria. Equal weight, rebalance annually. *Complex calculation.*"}
{"prompt_id": "FA-H-0281", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Free Cash Flow Conversion Trend': Calculate FCF_Conversion = FCF TTM / Net Income TTM. Rank stocks based on the 3-year slope of this ratio (using linear regression on annual data). Long stocks with improving conversion trend (top quintile slope), short stocks with deteriorating trend (bottom quintile slope). Universe: `Universe.QC500`. Dollar neutral, rebalance annually."}
{"prompt_id": "FA-H-0282", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script implementing a `PortfolioConstructionModel` for 'Quality Tilted Weighting': Input: Top 30% stocks selected by lowest P/E ratio TTM from `Universe.QC500`. Action: Calculate a Quality Score (ROE TTM rank, D/E TTM rank) for these selected stocks. Set target weights proportional to this Quality Score. Normalize weights, max 6% per stock. Rebalance quarterly."}
{"prompt_id": "FA-H-0283", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing industry rotation within Consumer Staples based on relative valuation: Calculate average P/S ratio TTM for GICS sub-industries (Food Products, Beverages, Tobacco, Household Products). Invest equally in the single sub-industry trading at the largest P/S discount compared to the overall Staples sector average P/S ratio TTM, using the top 5 market cap stocks within that sub-industry. Rebalance monthly."}
{"prompt_id": "FA-H-0284", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm using 'Shareholder Yield & Quality Filter': Select stocks from `Universe.QC500` in the top quintile by Shareholder Yield (Dividend Yield TTM + Net Buyback Yield TTM). From this subset, filter for stocks with ROE TTM > 12% AND Piotroski F-Score >= 5. Invest equally in qualifying stocks, rebalance quarterly."}
{"prompt_id": "FA-H-0285", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN Python algorithm using 'Multi-Factor Z-Scores': Calculate Z-scores for each stock relative to the `Universe.DollarVolume.Top(1000)` for: P/E TTM (lower is better), ROE TTM (higher is better), 1Y Rev Growth TTM (higher), D/E TTM (lower). Combine Z-scores: Score = Z(ROE) + Z(RevGrowth) - Z(PE) - Z(DE). Select top decile by Score. Equal weight, rebalance monthly."}
{"prompt_id": "FA-H-0286", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'Analyst Target Price vs. Fundamental Value': Calculate Fundamental Value using a simple DCF model proxy (e.g., FCF TTM / (Discount Rate - FCF Growth Rate TTM) - requires assumptions). Calculate Discrepancy = (Mean Analyst Target Price / Fundamental Value) - 1. Rank stocks. Long stocks where analysts are significantly above fundamental value (top quintile discrepancy), short where analysts are significantly below (bottom quintile). Dollar neutral, rebalance quarterly. (Requires estimate data and careful model implementation)."}
{"prompt_id": "FA-H-0287", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script with conditional allocation based on F-Score: Select top 40 stocks by Earnings Yield (EBIT/EV TTM) from `Universe.QC500`. Allocate capital based on Piotroski F-Score: Score 8-9 gets 1.5x base weight, Score 6-7 gets 1.0x base weight, Score 4-5 gets 0.5x base weight (base weight aims for equal if all were score 6-7). Normalize weights. Rebalance quarterly."}
{"prompt_id": "FA-H-0288", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm performing rotation between 'Cyclical Value' and 'Defensive Quality' based on Leading Economic Index (LEI) trend: If LEI (fetch via `Quandl`) 6-month rate of change is positive, invest in Cyclical Value (bottom P/B quintile TTM in Industrials/Materials/Energy sectors). If negative, invest in Defensive Quality (top ROE quintile TTM in Staples/Utilities/Healthcare sectors). Check LEI monthly, rebalance portfolio monthly between the two baskets."}
{"prompt_id": "FA-H-0289", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Cash Flow Return on Tangible Assets': Calculate CFROTA = OCF TTM / Average (Net PP&E + Net Working Capital - Goodwill/Intangibles). Select stocks from `Universe.DollarVolume.Top(1000)` with CFROTA > 10% AND positive revenue growth TTM. Weight by CFROTA score, rebalance quarterly. *Requires careful calculation of average balances.*"}
{"prompt_id": "FA-H-0290", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for a long-short strategy based on 'Dividend Safety Score': Score = (OCF TTM / Dividends Paid TTM Rank - higher better) + (Payout Ratio TTM Rank - lower better) + (D/E Ratio TTM Rank - lower better) + (5Y Dividend Growth Consistency Rank - low std dev better). Rank dividend-paying stocks in `Universe.QC500`. Long top quintile (high safety), short bottom quintile (low safety). Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0291", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm implementing 'Hierarchical Risk Parity' using fundamental factors: Define factors (Value, Growth, Quality, etc.). Build a tree structure based on factor correlations (using fundamental data time series). Apply risk parity allocation recursively down the tree. Rebalance quarterly. Universe: `Universe.QC500`. *Note: Highly complex.*"}
{"prompt_id": "FA-H-0292", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script selecting 'ESG Leaders with Momentum': Select stocks from `Universe.QC500` with top-tier composite ESG scores (external data/placeholder required). From this subset, select the top 50% based on 6-month price momentum. Weight by inverse volatility (90-day), rebalance monthly."}
{"prompt_id": "FA-H-0293", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Forecasting Factor Weights': Build a simple regression model predicting next month's expected return premium for Value, Quality, and Momentum factors based on current macro variables (VIX, yield spread, ISM PMI - fetched via Quandl). Use predicted returns to determine weights for each factor score in a composite model. Select top quintile based on the dynamically weighted composite score. Universe `Universe.DollarVolume.Top(1000)`. Rebalance monthly. *Note: Requires robust prediction model setup and backtesting.*"}
{"prompt_id": "FA-H-0294", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm for a 'Merger Arbitrage with Fundamental Quality Check II': Identify announced cash M&A deals (requires external data feed like Tiingo or placeholder). Filter for deals where target has Piotroski F-Score >= 6 AND the deal spread > 2% annualized. Further filter out deals where acquirer has D/E TTM > 3 or negative FCF TTM. Invest in top 5 qualifying deals based on highest annualized spread. Hold until deal close/break, rebalance portfolio holdings periodically."}
{"prompt_id": "FA-H-0295", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm using 'Book Value to Market Value Ratio Z-Score': Calculate B/M ratio (inverse of P/B TTM). Calculate Z-score for each stock's B/M relative to `Universe.DollarVolume.Top(1000)`. Select top decile (highest B/M Z-score). Filter for positive ROE TTM. Weight equally, rebalance quarterly."}
{"prompt_id": "FA-H-0296", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance."}
{"prompt_id": "FA-H-0297", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Tail Risk Fundamentals': Identify stocks with high leverage (D/E TTM > 3) AND low interest coverage (< 2 TTM). If portfolio weight in such stocks exceeds 10% during market stress (VIX > 30), reduce exposure to these specific stocks first. Main Strategy: Broad market index tracking."}
{"prompt_id": "FA-H-0298", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), 50/50 split. Check curve monthly using Quandl data, rebalance monthly."}
{"prompt_id": "FA-H-0299", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly."}
{"prompt_id": "FA-H-0300", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance."}
{"prompt_id": "FA-H-0301", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data."}
{"prompt_id": "FA-H-0302", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility). Use a suitable optimizer (e.g., maximize Sharpe ratio with Quality score as expected return). Rebalance quarterly."}
{"prompt_id": "FA-H-0303", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, quarterly rebalance."}
{"prompt_id": "FA-H-0304", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >50% recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."}
{"prompt_id": "FA-H-0305", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"}
{"prompt_id": "FA-H-0306", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, annual rebalance."}
{"prompt_id": "FA-H-0307", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: Small-cap value investing."}
{"prompt_id": "FA-H-0308", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia (higher forecast = higher weight, allow negative weights for shorting conceptually). Rebalance monthly. Requires robust forecast model implementation."}
{"prompt_id": "FA-H-0309", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."}
{"prompt_id": "FA-H-0310", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), reduce overall leverage or hedge with inflation-protected bonds (e.g., TIP). Main Strategy: Multi-factor fundamental selection. Check monthly."}
{"prompt_id": "FA-H-0311", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly."}
{"prompt_id": "FA-H-0312", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly."}
{"prompt_id": "FA-H-0313", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly."}
{"prompt_id": "FA-H-0314", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly."}
{"prompt_id": "FA-H-0315", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly."}
{"prompt_id": "FA-H-0316", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, rebalance **quarterly**."},
{"prompt_id": "FA-H-0317", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > **-2.0** OR Altman Z-Score < **1.5** for a holding, liquidate position immediately. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0318", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> **120bps**), favor Nasdaq 100 (QQQ). If inverted (< **-10bps**), favor Dividend Aristocrats (NOBL). If flat (**-10bps to 120bps**), 50/50 split. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0319", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top **decile** (instead of quintile). Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly."},
{"prompt_id": "FA-H-0320", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(**1200**)`. Dollar neutral, quarterly rebalance."},
{"prompt_id": "FA-H-0321", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own **3-year** historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0322", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top **20%** stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility). Use a suitable optimizer (e.g., maximize Sharpe ratio with Quality score as expected return). Rebalance quarterly."},
{"prompt_id": "FA-H-0323", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top **25** based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, **semi-annual** rebalance."},
{"prompt_id": "FA-H-0324", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >**60%** recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0325", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(**2500**) ` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0326", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate **6M** change in stock's composite ESG score minus **6M** change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, **semi-annual** rebalance."},
{"prompt_id": "FA-H-0327", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > **80** days OR DIO > **150** days, and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0328", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their **rank** of forecasted premia (highest forecast gets highest weight rank). Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0329", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < **0.90** (undervalued) and a proprietary 'Moat Rating' of 'Wide' **or 'Narrow'**. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0330", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> **6-month MA**), reduce overall leverage or hedge with inflation-protected bonds (e.g., TIP). Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0331", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the **6-month** change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly."},
{"prompt_id": "FA-H-0332", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. **Weight the average: 40% Earnings Vol, 20% Sales Vol, 20% Price Vol, 20% Coverage.** Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly."},
{"prompt_id": "FA-H-0333", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom **decile** stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly."},
{"prompt_id": "FA-H-0334", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > **95** and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < **75** or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly."},
{"prompt_id": "FA-H-0335", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= **6**. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0336", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on **1-year** slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0337", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, liquidate position **if held for less than 90 days**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0338", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), **use inverse volatility weighting** split. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0339", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM **and ROE TTM > 5%**. Weight by Net Payout Yield TTM value. Rebalance quarterly."},
{"prompt_id": "FA-H-0340", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top **decile** (growth cheap relative to value characteristics), short bottom **decile** (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance."},
{"prompt_id": "FA-H-0341", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < **-1.25** (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0342", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility **using 120-day volatility**). Use a suitable optimizer (e.g., maximize Sharpe ratio with Quality score as expected return). Rebalance quarterly."},
{"prompt_id": "FA-H-0343", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(**1000**)`. Equal weight, quarterly rebalance."},
{"prompt_id": "FA-H-0344", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >50% recession probability next 6m, move portfolio to **70% Cash/SHY, 30% Defensive ETFs**. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0345", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + **0.80***Receivables TTM + **0.40***Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0346", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top **decile** (improving ESG faster than peers), short bottom **decile** (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0347", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > **15%**, liquidate the position. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0348", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia **capped at 40% max weight per factor**. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0349", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top **30** based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0350", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), reduce overall leverage **by 25%** or hedge with inflation-protected bonds (e.g., TIP). Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0351", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.DollarVolume.Top(**800**)`. Dollar neutral, rebalance quarterly."},
{"prompt_id": "FA-H-0352", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (**6-Month** daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly."},
{"prompt_id": "FA-H-0353", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score**^1.5**). Renormalize. Rebalance quarterly."},
{"prompt_id": "FA-H-0354", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its **6-month** change is positive, invest 100% in Technology (XLK). If Confidence < 80 or **6-month** change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly."},
{"prompt_id": "FA-H-0355", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top **25%** stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0356", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom **decile** (improving efficiency trend), short top **decile** (worsening trend). Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0357", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **reduce position size by 50%**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0358", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), 50/50 split. Check curve **weekly** using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0359", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by **Market Cap**. Rebalance quarterly."},
{"prompt_id": "FA-H-0360", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, **monthly** rebalance."},
{"prompt_id": "FA-H-0361", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top **40** based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0362", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, **Net Margin** ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility). Use a suitable optimizer (e.g., maximize Sharpe ratio with Quality score as expected return). Rebalance quarterly."},
{"prompt_id": "FA-H-0363", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on **highest positive Net Income TTM** from `Universe.DollarVolume.Top(1200)`. Equal weight, quarterly rebalance."},
{"prompt_id": "FA-H-0364", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >50% recession probability next **12m**, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0365", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < **0.8 * NNWC**. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0366", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, **quarterly** rebalance."},
{"prompt_id": "FA-H-0367", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, **reduce position size by 33%**. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0368", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next **quarter's** expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia. **Rebalance quarterly**. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0369", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.DollarVolume.Top(**750**)`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0370", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold **Y** (instead of X) and CPI (Quandl) is accelerating (> 3-month MA), reduce overall leverage or hedge with inflation-protected bonds (e.g., TIP). Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0371", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top **15%** (improving ESG faster than peers), short bottom **15%** (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly."},
{"prompt_id": "FA-H-0372", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top **15%** based on final score (best stability). Weight by score. Rebalance quarterly."},
{"prompt_id": "FA-H-0373", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by **P/E ratio TTM** from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly."},
{"prompt_id": "FA-H-0374", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest **70% XLK / 30% XLP**. If Confidence < 80 or 3-month change is negative, invest **30% XLK / 70% XLP**. Otherwise allocate 50/50 split. Check index monthly, rebalance monthly."},
{"prompt_id": "FA-H-0375", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest in the final selection of high-quality, cheap stocks, **weighted by F-Score**. Rebalance quarterly."},
{"prompt_id": "FA-H-0376", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for **Insurance sub-sector** stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0377", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **apply a 10% haircut to its target weight**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0378", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on **10Y-FedFunds rate spread**: If spread is widening (> 50bps and rising), favor Nasdaq 100 (QQQ). If narrowing/negative (< 20bps and falling), favor Dividend Aristocrats (NOBL). Otherwise 50/50 split. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0379", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance **annually**."},
{"prompt_id": "FA-H-0380", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral **within each sector**. Quarterly rebalance."},
{"prompt_id": "FA-H-0381", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.DollarVolume.Top(**800**)`. Equal weight, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0382", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility **Targeting portfolio volatility below 15% annualized**). Use a suitable optimizer. Rebalance quarterly."},
{"prompt_id": "FA-H-0383", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. **Weight by inverse volatility**, quarterly rebalance."},
{"prompt_id": "FA-H-0384", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and '**Cyclical Sector ETFs**' (XLY, XLI, XLB) based on recession probability model (conceptual): If model indicates >50% recession probability next 6m, invest equally in Defensive sector ETFs. Otherwise, invest equally in Cyclical sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0385", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select **all qualifying stocks (max 20)** based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0386", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. **Maintain sector neutrality**. Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0387", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If **(DSO + DIO) > 200** days and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0388", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on **sentiment indicators (e.g., AAII Bull/Bear)**. Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0389", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. **Weight by Moat Rating category (higher weight for Wide)**, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0390", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to **interest rate changes** using fundamental proxies (e.g., high debt/long duration assets more sensitive). If portfolio's estimated duration exceeds threshold X and 10Y yield (Quandl) is rising (> 3-month MA), reduce overall leverage or hedge with rate futures. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0391", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the **level** of this relative Z-score (not change). Long top quintile (high ESG vs peers), short bottom quintile (low ESG vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly."},
{"prompt_id": "FA-H-0392", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high **Debt/Equity Ratio (lower is better)**. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly."},
{"prompt_id": "FA-H-0393", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance **monthly**."},
{"prompt_id": "FA-H-0394", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on **ISM Services Index** trend: If ISM Services Index (fetch via Quandl) > 55 and its 3-month change is positive, invest 100% in Technology (XLK). If Index < 50 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly."},
{"prompt_id": "FA-H-0395", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection **(max 40 stocks)** of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0396", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on **YoY Change** of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0397", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **exit position if also P/E > Sector Median**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0398", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), 50/50 split. Check curve monthly using Quandl data, rebalance **quarterly**."},
{"prompt_id": "FA-H-0399", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by **inverse volatility (60-day)**. Rebalance quarterly."},
{"prompt_id": "FA-H-0400", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = **(0.6 * Growth_Rank) - (0.4 * Value_Rank)**. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance."},
{"prompt_id": "FA-H-0401", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate **and positive ROE TTM**. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0402", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (**Portfolio Average Quality Score** / Portfolio Price Volatility), **with max weight per stock of 7%**. Use a suitable optimizer. Rebalance quarterly."},
{"prompt_id": "FA-H-0403", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, **monthly** rebalance."},
{"prompt_id": "FA-H-0404", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >50% recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model **quarterly**, rebalance **quarterly**. Requires model implementation/data."},
{"prompt_id": "FA-H-0405", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top **10** based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0406", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.DollarVolume.Top(**1000**)`. Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0407", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: **Sector Rotation based on Value**."},
{"prompt_id": "FA-H-0408", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) using **risk parity based on forecasted premia volatility**. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0409", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, **quarterly** rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0410", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), **increase allocation to high-margin stocks within the portfolio**. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0411", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance **semi-annually**."},
{"prompt_id": "FA-H-0412", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by **inverse volatility (90-day)**. Rebalance quarterly."},
{"prompt_id": "FA-H-0413", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly, **maximum weight 8% per stock**."},
{"prompt_id": "FA-H-0414", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index **weekly**, rebalance monthly."},
{"prompt_id": "FA-H-0415", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(**1000**)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0416", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, rebalance **semi-annually**."},
{"prompt_id": "FA-H-0417", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > **-1.5** OR Altman Z-Score < **2.0** for a holding, liquidate position immediately. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0418", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), **weight based on relative 1-month performance**. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0419", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top **15%**. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly."},
{"prompt_id": "FA-H-0420", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. **Weight longs by Growth Rank, shorts by inverse Value Rank**. Dollar neutral, quarterly rebalance."},
{"prompt_id": "FA-H-0421", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. **Weight by Z-score magnitude**, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0422", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility), **rebalancing monthly**. Use a suitable optimizer. "},
{"prompt_id": "FA-H-0423", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM **AND positive FCF TTM**. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, quarterly rebalance."},
{"prompt_id": "FA-H-0424", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >**40%** recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0425", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. **Weight by inverse Price/NNWC ratio**, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0426", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, **rebalance based on magnitude of ESG change difference.** Annual rebalance."},
{"prompt_id": "FA-H-0427", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, liquidate the position **only if stock price is also down 15% over last month**. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0428", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) **giving double weight to the factor with highest forecasted premium**. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0429", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. **Add filter: D/E ratio < 1.5**. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0430", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), reduce overall leverage or hedge with **commodity ETFs (e.g., DBC)**. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0431", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. **Portfolio weighted by Z-score change magnitude**. Dollar neutral, rebalance quarterly."},
{"prompt_id": "FA-H-0432", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top **20%** based on final score (best stability). Weight by score. Rebalance quarterly."},
{"prompt_id": "FA-H-0433", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.DollarVolume.Top(**800**)`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly."},
{"prompt_id": "FA-H-0434", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance **quarterly**."},
{"prompt_id": "FA-H-0435", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= **8**. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0436", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom **15%** (improving efficiency trend), short top **15%** (worsening trend). Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0437", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **reduce weight by 75% if ROE is also declining YoY**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0438", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), **invest in NOBL only**. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0439", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly, **max 5% weight per stock**."},
{"prompt_id": "FA-H-0440", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance. **Add ROE > 0 filter for longs.**"},
{"prompt_id": "FA-H-0441", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, **semi-annual** rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0442", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility **using EWMA volatility estimate**). Use a suitable optimizer. Rebalance quarterly."},
{"prompt_id": "FA-H-0443", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. **Weight by market cap**, quarterly rebalance."},
{"prompt_id": "FA-H-0444", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using **VIX level, credit spreads**, LEI change) indicates >50% recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0445", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. Equal weight, **annual** rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0446", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. **Use 1.25x leverage on longs, 0.75x on shorts**. Dollar neutral, annual rebalance."},
{"prompt_id": "FA-H-0447", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: **GARP stock selection**."},
{"prompt_id": "FA-H-0448", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia, **only taking long positions (set negative forecasts to zero weight)**. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0449", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < **0.80** (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0450", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), **liquidate 10% of lowest margin stocks**. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0451", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly, **max 4% weight per position**."},
{"prompt_id": "FA-H-0452", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance **semi-annually**."},
{"prompt_id": "FA-H-0453", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly, **target beta of 0.9**. "},
{"prompt_id": "FA-H-0454", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate **based on inverse volatility of XLK and XLP**. Check index monthly, rebalance monthly."},
{"prompt_id": "FA-H-0455", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest **by rank-score weighting** in the final selection of high-quality, cheap stocks. Rebalance quarterly."},
{"prompt_id": "FA-H-0456", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance. **Universe: Universe.QC500 constituents in Financials sector.**"},
{"prompt_id": "FA-H-0457", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **prohibit adding further to the position**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0458", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), **invest in a 60/40 bond/equity portfolio (e.g., AGG/SPY)**. Check curve monthly using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0459", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM **and Payout Ratio < 80%**. Weight by Net Payout Yield TTM value. Rebalance quarterly."},
{"prompt_id": "FA-H-0460", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(**1500**)`. Dollar neutral, quarterly rebalance."},
{"prompt_id": "FA-H-0461", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. **Weight inversely by P/E Z-score**, monthly rebalance. Requires estimate data."},
{"prompt_id": "FA-H-0462", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility), **minimum weight 1% per stock**. Use a suitable optimizer. Rebalance quarterly."},
{"prompt_id": "FA-H-0463", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top **15** based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, quarterly rebalance."},
{"prompt_id": "FA-H-0464", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model (using yield curve slope, LEI change, unemployment rate change) indicates >50% recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest **weighted by inverse volatility** in Defensive sector ETFs. Check model monthly, rebalance monthly. Requires model implementation/data."},
{"prompt_id": "FA-H-0465", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC **and Piotroski F-Score >= 5**. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. *Deep value screen.*"},
{"prompt_id": "FA-H-0466", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, annual rebalance. **Exclude Energy sector.**"},
{"prompt_id": "FA-H-0467", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, **liquidate position over 5 trading days**. Main Strategy: Small-cap value investing."},
{"prompt_id": "FA-H-0468", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across **individual stocks representing top decile of each factor** proportionally to their forecasted premia. Rebalance monthly. Requires robust forecast model implementation."},
{"prompt_id": "FA-H-0469", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top 25 based on lowest PriceToFairValueRatio from `Universe.QC500`. **Weight based on PriceToFairValueRatio magnitude (lower=higher weight)**, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0470", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), **reduce positions in stocks with D/E ratio > 2 first**. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0471", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. **Target net exposure of 20% long**. Rebalance quarterly."},
{"prompt_id": "FA-H-0472", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly. **Add filter: Positive FCF TTM.**"},
{"prompt_id": "FA-H-0473", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly, **only if average quality score drops below threshold.**"},
{"prompt_id": "FA-H-0474", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly. **Use leveraged ETFs (e.g., TQQQ, ??? for staples).**"},
{"prompt_id": "FA-H-0475", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance **annually**."},
{"prompt_id": "FA-H-0476", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance. **Apply additional filter: ROA TTM > 0.5% for longs.**"},
{"prompt_id": "FA-H-0477", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **liquidate the position and short it with 2% portfolio weight**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0478", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), 50/50 split. Check curve **daily** using Quandl data, rebalance monthly."},
{"prompt_id": "FA-H-0479", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly, **minimum 10 holdings.**"},
{"prompt_id": "FA-H-0480", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance. **Only trade stocks with market cap > $2B.**"},
{"prompt_id": "FA-H-0481", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm using 'Forward P/E vs. Historical P/E Z-Score': Calculate Z-score of stock's Forward P/E relative to its own 5-year historical distribution of Forward P/E. Select stocks with Z-score < -1 (cheap vs history). Require positive forward EPS growth estimate. Select top 30 based on lowest Z-score from `Universe.QC500`. Equal weight, monthly rebalance. Requires estimate data. **Exclude Utilities sector.**"},
{"prompt_id": "FA-H-0482", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `PortfolioConstructionModel` optimizing 'Fundamental Quality per Unit of Volatility': Input: Top 30% stocks by Quality Score (ROE, D/E, Margin ranks). Action: Optimize weights to maximize (Portfolio Average Quality Score / Portfolio Price Volatility). Use a suitable optimizer. Rebalance quarterly. **Apply sector constraints (+/- 5% vs benchmark).**"},
{"prompt_id": "FA-H-0483", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm selecting 'Turnaround Candidates based on Margin Improvement': Require Negative Net Income Previous TTM & Positive Net Income TTM. Also require Gross Margin TTM > Gross Margin Prev TTM AND Operating Margin TTM > Operating Margin Prev TTM. Select top 20 based on magnitude of Net Income TTM improvement from `Universe.DollarVolume.Top(1200)`. Equal weight, quarterly rebalance. **Add momentum filter (positive 3M return).**"},
{"prompt_id": "FA-H-0484", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm rotating between 'Defensive sectors ETFs' (XLU, XLV, XLP) and 'Cash' (or SHY) based on recession probability model (conceptual): If model indicates >50% recession probability next 6m, move portfolio to Cash/SHY. Otherwise, invest equally in Defensive sector ETFs. Check model monthly, rebalance monthly. **Use insights from model to adjust position sizes within defensive ETFs (e.g., higher prob -> more weight to staples).**"},
{"prompt_id": "FA-H-0485", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm selecting based on 'Price / Net Net Working Capital (NNWC)': Calculate NNWC = Cash & Equivalents TTM + 0.75*Receivables TTM + 0.5*Inventory TTM - Total Liabilities TTM. Select stocks from `Universe.DollarVolume.Top(2000)` where Market Cap < NNWC. Select top 15 based on lowest Price/NNWC ratio. Equal weight, quarterly rebalance. **Require positive sales growth TTM.** *Deep value screen.*"},
{"prompt_id": "FA-H-0486", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm for long-short based on 'ESG Score Change vs. Sector Change': Calculate 1Y change in stock's composite ESG score minus 1Y change in its GICS Sector average ESG score. Rank stocks. Long top quintile (improving ESG faster than peers), short bottom quintile (improving ESG slower or worsening vs peers). Requires time-series ESG data. `Universe.QC500`. Dollar neutral, annual rebalance. **Weight positions by inverse market cap.**"},
{"prompt_id": "FA-H-0487", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Fundamental Liquidity Risk': Monitor Days Sales Outstanding (DSO TTM) and Days Inventory Outstanding (DIO TTM) for holdings. If DSO > 90 days OR DIO > 120 days, and these metrics have worsened YoY by > 10%, liquidate the position. Main Strategy: **Dividend Growth Investing**."},
{"prompt_id": "FA-H-0488", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm using 'Dynamic Asset Allocation based on Factor Premia Forecast': Build simple time-series models forecasting next month's expected return premium for Value, Quality, and Momentum factors based on current macro data (VIX, yield spread, etc.). Allocate capital across factor ETFs (Value-VTV, Quality-QUAL, Momentum-MTUM, Low Vol-USMV) proportionally to their forecasted premia. Rebalance monthly. **Use only VIX > 20 as condition to overweight Low Vol.**"},
{"prompt_id": "FA-H-0489", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Price / Fair Value (External Provider)': Assume custom data source `VendorData.FairValue` provides 'PriceToFairValueRatio'. Select stocks with PriceToFairValueRatio < 0.85 (undervalued) and a proprietary 'Moat Rating' of 'Wide'. Select top **20** based on lowest PriceToFairValueRatio from `Universe.QC500`. Equal weight, monthly rebalance. Requires specific vendor custom data feed integration."},
{"prompt_id": "FA-H-0490", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script implementing a `RiskManagementModel`. Logic: Calculate portfolio's sensitivity to inflation changes using fundamental proxies (e.g., high margin stocks less sensitive, high debt stocks more sensitive). If portfolio's estimated inflation beta exceeds threshold X and CPI (Quandl) is accelerating (> 3-month MA), **increase cash holding to 20%**. Main Strategy: Multi-factor fundamental selection. Check monthly."},
{"prompt_id": "FA-H-0491", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm for a long-short strategy based on 'ESG Score Relative to Industry Trend': Calculate each stock's composite ESG score Z-score relative to its GICS industry. Rank stocks based on the 1-year change in this relative Z-score. Long top quintile (improving ESG faster than peers), short bottom quintile (ESG improving slower or worsening vs peers). Requires time-series ESG data. Universe `Universe.QC500`. Dollar neutral, rebalance quarterly. **Only trade if Z-score change is > |0.5|.**"},
{"prompt_id": "FA-H-0492", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN Python algorithm selecting stocks based on 'Holistic Stability Score': Combine Z-scores (relative to `Universe.DollarVolume.Top(1000)`) for low Earnings Volatility (3Y quarterly EPS std dev), low Sales Volatility (3Y quarterly Sales std dev), low Price Volatility (1Y daily returns std dev), and high Interest Coverage Ratio TTM. Average the Z-scores. Select top 10% based on final score (best stability). Weight by score. Rebalance quarterly. **Require Interest Coverage > 3.**"},
{"prompt_id": "FA-H-0493", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect Python algorithm implementing a `PortfolioConstructionModel` for 'Fundamental Quality Tilt on Value Stocks': Input: Bottom quintile stocks selected by P/B ratio TTM from `Universe.QC500`. Action: Calculate composite Quality score (ROE TTM, D/E TTM, FCF Yield TTM ranks) for these value stocks. Tilt the weights (starting from equal) towards stocks with better Quality scores (e.g., Weight proportional to Quality Score). Renormalize. Rebalance quarterly. **Use InsightWeightingPortfolioConstructionModel based on Quality score.**"},
{"prompt_id": "FA-H-0494", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm performing rotation between 'Technology Sector ETF' (XLK) and 'Consumer Staples Sector ETF' (XLP) based on Consumer Confidence Index trend: If Consumer Confidence Index (fetch via Quandl) > 90 and its 3-month change is positive, invest 100% in Technology (XLK). If Confidence < 80 or 3-month change is negative, invest 100% in Consumer Staples (XLP). Otherwise allocate 50/50 split. Check index monthly, rebalance monthly. **Hedge XLK position with short QQQ if VIX > 25.**"},
{"prompt_id": "FA-H-0495", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script for a ' Piotroski Enhanced Magic Formula' strategy: Step 1: Select top 30% stocks based on Greenblatt Magic Formula ranks (Earnings Yield TTM, ROIC TTM) from `Universe.DollarVolume.Top(1500)`. Step 2: From this subset, select only those with Piotroski F-Score >= 7. Step 3: Invest equally in the final selection of high-quality, cheap stocks. Rebalance quarterly. **Liquidate if F-Score drops below 5.**"},
{"prompt_id": "FA-H-0496", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Efficiency Ratio Trend (Financials)': Calculate Efficiency Ratio = NonInterestExpense TTM / Revenue TTM for Financials sector stocks. Rank based on 3-year slope of this ratio. Long bottom quintile (improving efficiency trend), short top quintile (worsening trend). Dollar neutral, annual rebalance. **Adjust position size based on slope magnitude.**"},
{"prompt_id": "FA-H-0497", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QC LEAN script implementing `RiskManagementModel` based on 'Accounting Red Flags': If custom data feed parsing SEC filings flags high probability of manipulation based on Beneish M-Score > -1.78 OR Altman Z-Score < 1.8 for a holding, **ignore buy signals for this stock for 1 year**. Main strategy: Broad fundamental index ETF (e.g., VTV). Requires custom data feed/calculation for flags."},
{"prompt_id": "FA-H-0498", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a LEAN algorithm rotating between 'Dividend Aristocrats ETF' (NOBL) and 'Nasdaq 100 ETF' (QQQ) based on 10Y-3M yield curve: If curve is steep (> 100bps), favor Nasdaq 100 (QQQ). If inverted (< 0bps), favor Dividend Aristocrats (NOBL). If flat (0-100bps), 50/50 split. Check curve monthly using Quandl data, rebalance monthly. **Use 3M T-Bill yield as cash proxy if curve inverted.**"},
{"prompt_id": "FA-H-0499", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QC LEAN algorithm selecting based on 'Net Payout Yield Z-Score': Calculate Net Payout Yield TTM = (Div TTM + Buybacks TTM) / Market Cap. Calculate Z-score relative to `Universe.QC500`. Select top quintile. Require positive FCF TTM. Weight by Net Payout Yield TTM value. Rebalance quarterly. **Maximum number of holdings is 35.**"},
{"prompt_id": "FA-H-0500", "strategy_category": "Fundamental Analysis", "prompt_text": "Implement a QC LEAN algorithm for long-short based on 'Growth Score vs. Valuation Score': Calculate Growth Score (Rev Growth TTM, EPS Growth TTM ranks) and Value Score (P/E TTM, P/B TTM ranks). Score = Growth_Rank - Value_Rank. Long top quintile (growth cheap relative to value characteristics), short bottom quintile (value expensive relative to growth). `Universe.DollarVolume.Top(1000)`. Dollar neutral, quarterly rebalance. **Universe excludes micro-caps (Market Cap < $300M).**"}