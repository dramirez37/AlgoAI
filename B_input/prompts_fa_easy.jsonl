{"prompt_id": "FA-E-0001", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm in Python that retrieves and logs the daily Price-to-Earnings (P/E) ratio for Apple (AAPL).\n\n**Core Logic Steps:**\n1. In `Initialize`, add AAPL equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogPeRatio`) to run daily, 30 minutes after market open for AAPL.\n3. In `LogPeRatio`, get the AAPL `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the `ValuationRatios.PERatio` from the `Fundamentals` data.\n6. Log the retrieved P/E ratio using a specific format. If the P/E ratio is unavailable (e.g., zero or None), log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AAPL\", Resolution.Daily)` to request AAPL data.\n- Must enable fundamental data for the security (e.g., `security.SetFundamentalsRequired(True)` or via Universe settings).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"AAPL\"), self.TimeRules.AfterMarketOpen(\"AAPL\", 30), self.LogPeRatio)` for daily execution.\n- Must access the P/E ratio via `security.Fundamentals.ValuationRatios.PERatio`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AAPL.\n- The logging action must be scheduled precisely 30 minutes after AAPL's market open each day.\n- Log output format for available P/E: \"AAPL P/E: [value]\"\n- Log output format for unavailable P/E: \"AAPL P/E: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogPeRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include a check for data availability (`security` and `security.Fundamentals` are not None) before accessing the P/E ratio.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging AAPL's daily P/E).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How the `Schedule.On` function is used to trigger the daily logging.\n* The specific API property used to access the P/E ratio (`Fundamentals.ValuationRatios.PERatio`).\n* How the algorithm checks for data availability before attempting to access the P/E ratio.\n* How the algorithm handles cases where the P/E ratio might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0002", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm to fetch and print the current Market Cap for Microsoft (MSFT) during initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add MSFT equity data with daily resolution.\n2. Enable fundamental data for MSFT (e.g., via Universe settings or `SetFundamentalsRequired`).\n3. Immediately after adding the equity, retrieve the MSFT `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the `MarketCap` from the `Fundamentals` data.\n6. Check if the Market Cap value is available and potentially valid (e.g., greater than zero).\n7. If available, print the Market Cap using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"MSFT\", Resolution.Daily)` to request MSFT data.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access the Market Cap via `self.Securities[\"MSFT\"].Fundamentals.MarketCap`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only MSFT.\n- The Market Cap fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available Market Cap: \"MSFT Initial Market Cap: [value]\"\n- Print output format for unavailable Market Cap: \"MSFT Initial Market Cap: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include a check immediately after `AddEquity` to ensure the security object and its `Fundamentals` exist before accessing `MarketCap`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing MSFT's Market Cap at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the Market Cap retrieval happens within `Initialize`.\n* The specific API property used to access the Market Cap (`Fundamentals.MarketCap`).\n* How the algorithm checks for the availability of the Security object and its fundamental data before accessing the Market Cap.\n* How the algorithm handles cases where the Market Cap might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0003", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that plots the Trailing Twelve Months (TTM) Revenue for Amazon (AMZN) daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AMZN equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'AMZN Fundamentals' and register a `Series` named 'Revenue TTM' associated with that chart.\n3. Schedule an event function (`PlotRevenue`) to run daily, at market close for AMZN.\n4. In `PlotRevenue`, get the AMZN `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the TTM Revenue (`FinancialStatements.IncomeStatement.TotalRevenue.TwelveMonths`) from the `Fundamentals` data.\n7. Check if the retrieved revenue value is valid (not None).\n8. If valid, plot the revenue value using the 'Revenue TTM' series on the 'AMZN Fundamentals' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AMZN\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('AMZN Fundamentals')` and `Series('Revenue TTM', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('AMZN Fundamentals', 'Revenue TTM', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"AMZN\"), self.TimeRules.AtMarketClose(\"AMZN\"), self.PlotRevenue)` for daily execution.\n- Must access the TTM Revenue via `security.Fundamentals.FinancialStatements.IncomeStatement.TotalRevenue.TwelveMonths`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AMZN.\n- Plotting must occur exactly once per trading day, at market close.\n- The plot must be named 'AMZN Fundamentals'.\n- The series must be named 'Revenue TTM'.\n- Only plot valid revenue figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotRevenue`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific revenue value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting AMZN's TTM Revenue daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating the chart and series, scheduling).\n* How the `Schedule.On` function is used to trigger the daily plotting at market close.\n* The specific API property used to access the TTM Revenue.\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the revenue.\n* Any assumptions made (e.g., assuming TTM Revenue data is consistently available)."}
{"prompt_id": "FA-E-0004", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a LEAN Python algorithm that accesses and logs the Debt-to-Equity ratio for Tesla (TSLA) every trading day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add TSLA equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogDebtEquityRatio`) to run daily, 15 minutes before market close for TSLA.\n3. In `LogDebtEquityRatio`, get the TSLA `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the Debt-to-Equity ratio (`OperationRatios.DebtEquityRatio.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved ratio value is valid (not None).\n7. If valid, log the ratio using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"TSLA\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"TSLA\"), self.TimeRules.BeforeMarketClose(\"TSLA\", 15), self.LogDebtEquityRatio)`.\n- Must access the ratio via `security.Fundamentals.OperationRatios.DebtEquityRatio.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only TSLA.\n- Logging must occur exactly once per trading day, 15 minutes before TSLA's market close.\n- Log output format for available ratio: \"TSLA Debt/Equity Ratio: [value]\"\n- Log output format for unavailable ratio: \"TSLA Debt/Equity Ratio: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogDebtEquityRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the ratio.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging TSLA's daily Debt-to-Equity ratio).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging before market close.\n* The specific API property used to access the Debt-to-Equity ratio (`OperationRatios.DebtEquityRatio.OneYear`).\n* How the algorithm checks for data availability before accessing the ratio.\n* How the algorithm handles cases where the ratio might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0005", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that gets and stores the latest Dividend Yield for Johnson & Johnson (JNJ) in a variable daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JNJ equity data with daily resolution and enable fundamental data.\n2. Declare a class member variable `self.latest_dividend_yield` initialized to `None`.\n3. Schedule an event function (`UpdateDividendYield`) to run daily, at market open for JNJ.\n4. In `UpdateDividendYield`, get the JNJ `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the Dividend Yield (`ValuationRatios.DividendYield`) from the `Fundamentals` data.\n7. Check if the retrieved yield value is valid (not None).\n8. If valid, update `self.latest_dividend_yield` with the new value and log the update.\n9. If not valid, log that no update occurred.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JNJ\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"JNJ\"), self.TimeRules.AtMarketOpen(\"JNJ\"), self.UpdateDividendYield)`.\n- Must access the yield via `security.Fundamentals.ValuationRatios.DividendYield`.\n- Must store the value in a class member variable named exactly `self.latest_dividend_yield`.\n- Must use `self.Log()` to confirm the update or unavailability.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JNJ.\n- The update check must occur exactly once per trading day, precisely at JNJ's market open.\n- The dividend yield must be stored in a class variable named `latest_dividend_yield`.\n- Log message on successful update: \"JNJ Dividend Yield updated to: [value]\"\n- Log message if yield is unavailable: \"JNJ Dividend Yield not available today.\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, variable initialization, scheduling).\n- Implement the scheduled event handler method (`UpdateDividendYield`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the yield value itself) before updating the variable.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (storing JNJ's latest Dividend Yield daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, initializing the variable `self.latest_dividend_yield`, scheduling).\n* How `Schedule.On` triggers the daily update at market open.\n* The specific API property used to access the Dividend Yield (`ValuationRatios.DividendYield`).\n* How the retrieved value is stored in the required class variable `self.latest_dividend_yield`.\n* How the algorithm checks for data availability before accessing the yield.\n* How the algorithm handles cases where the yield might be unavailable and the corresponding log message.\n* The format of the log messages for both successful updates and unavailable data."}
{"prompt_id": "FA-E-0006", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python script to log the Price-to-Book (P/B) ratio for Google (GOOG) each day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add GOOG equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogPbRatio`) to run daily, 45 minutes after market open for GOOG.\n3. In `LogPbRatio`, get the GOOG `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the `ValuationRatios.PBRatio` from the `Fundamentals` data.\n6. Log the retrieved P/B ratio using a specific format. If the P/B ratio is unavailable (e.g., zero or None), log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"GOOG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"GOOG\"), self.TimeRules.AfterMarketOpen(\"GOOG\", 45), self.LogPbRatio)`.\n- Must access the P/B ratio via `security.Fundamentals.ValuationRatios.PBRatio`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only GOOG.\n- The logging action must be scheduled precisely 45 minutes after GOOG's market open each day.\n- Log output format for available P/B: \"GOOG P/B Ratio: [value]\"\n- Log output format for unavailable P/B: \"GOOG P/B Ratio: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogPbRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security` and `security.Fundamentals`) before accessing the P/B ratio.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging GOOG's daily P/B ratio).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How the `Schedule.On` function is used to trigger the daily logging.\n* The specific API property used to access the P/B ratio (`Fundamentals.ValuationRatios.PBRatio`).\n* How the algorithm checks for data availability before attempting to access the P/B ratio.\n* How the algorithm handles cases where the P/B ratio might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0007", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm that fetches and plots the annual Net Income for NVIDIA (NVDA) when fundamental data is updated.\n\n**Core Logic Steps:**\n1. In `Initialize`, add NVDA equity data with daily resolution and enable fundamental data.\n2. Define a universe selection function (even if only for NVDA) or use `SetFundamentalsRequired(True)` for the NVDA security.\n3. Implement the `OnFundamentals` method which receives `FineFundamental` data.\n4. Create a `Chart` named 'NVDA Annual Data' and register a `Series` named 'Net Income' in `Initialize`.\n5. Inside `OnFundamentals`, filter for the NVDA symbol (`fine.Symbol == self.nvda_symbol`).\n6. Access the annual Net Income (`FinancialStatements.IncomeStatement.NetIncome.OneYear`) from the `fine` object.\n7. Check if the retrieved Net Income value is valid (not None).\n8. If valid, plot the value using the 'Net Income' series on the 'NVDA Annual Data' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"NVDA\", Resolution.Daily)`.\n- Must enable fundamental data reception, either via `security.SetFundamentalsRequired(True)` or by implementing a Universe selection function using `self.AddUniverse(self.FundamentalFunction)`.\n- Must implement the `OnFundamentals(self, fine)` method if using universe selection, or handle fundamental data within `OnData` if using `SetFundamentalsRequired`.\n- Must use `Chart('NVDA Annual Data')` and `Series('Net Income', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must access the annual Net Income via `fine.FinancialStatements.IncomeStatement.NetIncome.OneYear` (within `OnFundamentals`) or `security.Fundamentals.FinancialStatements.IncomeStatement.NetIncome.OneYear` (within `OnData` or scheduled event).\n- Must use `self.Plot('NVDA Annual Data', 'Net Income', value)`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only NVDA's fundamental updates.\n- Plotting must occur *only* when new fundamental data for NVDA is processed (typically via `OnFundamentals` or checking for updates in `OnData`).\n- The plot must be named 'NVDA Annual Data'.\n- The series must be named 'Net Income'.\n- Only plot valid Net Income figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent logic in `OnData`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (e.g., `fine` object properties or `security.Fundamentals`) before plotting.\n- Store the NVDA `Symbol` object in `Initialize` for comparison if using `OnFundamentals`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting NVDA's annual Net Income upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, creating chart/series).\n* How fundamental data updates are captured (either `OnFundamentals` or checking `security.Fundamentals` staleness).\n* The specific API property used to access the *annual* Net Income.\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm ensures it only plots data for NVDA.\n* How the algorithm checks for data validity before plotting."}
{"prompt_id": "FA-E-0008", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python algorithm to print the Sector Name for SPY ETF during the `Initialize` method.\n\n**Core Logic Steps:**\n1. In `Initialize`, add SPY ETF data with daily resolution.\n2. Enable fundamental data access (required for asset classification).\n3. Immediately after adding the ETF, retrieve the SPY `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the Sector Name (`AssetClassification.MorningstarSectorCode`) from the `Fundamentals` data. Note: Sector Name might not be directly available; `MorningstarSectorCode` is the typical field.\n6. Check if the Sector Code value is available (not None or empty).\n7. If available, print the Sector Code using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"SPY\", Resolution.Daily)` (or `AddETF`).\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True`).\n- Must access the Sector Code via `self.Securities[\"SPY\"].Fundamentals.AssetClassification.MorningstarSectorCode`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only SPY.\n- The Sector Code fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available Sector Code: \"SPY Sector Code: [value]\"\n- Print output format for unavailable Sector Code: \"SPY Sector Code: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include a check immediately after `AddEquity` to ensure the security object and its `Fundamentals` exist before accessing `AssetClassification`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing SPY's Sector Code at initialization).\n* Key setup steps in `Initialize` (adding ETF, enabling fundamental data).\n* Why the Sector Code retrieval happens within `Initialize`.\n* The specific API property used to access the Sector Code (`Fundamentals.AssetClassification.MorningstarSectorCode`).\n* How the algorithm checks for the availability of the Security object and its fundamental data before accessing the Sector Code.\n* How the algorithm handles cases where the Sector Code might be unavailable (printing 'N/A').\n* The format of the log output.\n* A note that ETFs might use different classification fields than stocks."}
{"prompt_id": "FA-E-0009", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect script that retrieves and logs the Return on Equity (ROE) for Meta Platforms (META) daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add META equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogRoe`) to run daily, one hour after market open for META.\n3. In `LogRoe`, get the META `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Return on Equity (`OperationRatios.ROE.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved ROE value is valid (not None).\n7. If valid, log the ROE using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"META\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"META\"), self.TimeRules.AfterMarketOpen(\"META\", 60), self.LogRoe)`.\n- Must access the ROE via `security.Fundamentals.OperationRatios.ROE.OneYear` (TTM/Annual ROE).\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only META.\n- Logging must occur exactly once per trading day, 60 minutes after META's market open.\n- Log output format for available ROE: \"META ROE (TTM): [value]\"\n- Log output format for unavailable ROE: \"META ROE (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogRoe`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the ROE.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging META's daily TTM ROE).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access the TTM Return on Equity (`OperationRatios.ROE.OneYear`).\n* How the algorithm checks for data availability before accessing the ROE.\n* How the algorithm handles cases where the ROE might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0010", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Quick Ratio for Berkshire Hathaway (BRK.B) every trading day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add BRK.B equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'BRK.B Ratios' and register a `Series` named 'Quick Ratio' associated with that chart.\n3. Schedule an event function (`PlotQuickRatio`) to run daily, 30 minutes before market close for BRK.B.\n4. In `PlotQuickRatio`, get the BRK.B `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the Quick Ratio (`OperationRatios.QuickRatio.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved ratio value is valid (not None).\n8. If valid, plot the ratio value using the 'Quick Ratio' series on the 'BRK.B Ratios' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"BRK.B\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('BRK.B Ratios')` and `Series('Quick Ratio', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('BRK.B Ratios', 'Quick Ratio', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"BRK.B\"), self.TimeRules.BeforeMarketClose(\"BRK.B\", 30), self.PlotQuickRatio)`.\n- Must access the Quick Ratio via `security.Fundamentals.OperationRatios.QuickRatio.OneYear` (or another period like `.ThreeMonths` if specified).\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only BRK.B.\n- Plotting must occur exactly once per trading day, 30 minutes before market close.\n- The plot must be named 'BRK.B Ratios'.\n- The series must be named 'Quick Ratio'.\n- Only plot valid ratio figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotQuickRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific ratio value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting BRK.B's Quick Ratio daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting before market close.\n* The specific API property used to access the Quick Ratio (specify the period, e.g., `OneYear`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the ratio.\n* Any assumptions made."}
{"prompt_id": "FA-E-0011", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Earnings Per Share (EPS) TTM for Visa (V) daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add V equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogEpsTtm`) to run daily, at market open for V.\n3. In `LogEpsTtm`, get the V `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM EPS (`EarningRatios.EPSTTM`) from the `Fundamentals` data.\n6. Check if the retrieved EPS value is valid (not None).\n7. If valid, log the EPS using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"V\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"V\"), self.TimeRules.AtMarketOpen(\"V\"), self.LogEpsTtm)`.\n- Must access the TTM EPS via `security.Fundamentals.EarningRatios.EPSTTM`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only V.\n- Logging must occur exactly once per trading day, at V's market open.\n- Log output format for available EPS: \"V EPS TTM: [value]\"\n- Log output format for unavailable EPS: \"V EPS TTM: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogEpsTtm`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the EPS.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging V's daily TTM EPS).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging at market open.\n* The specific API property used to access the TTM Earnings Per Share (`EarningRatios.EPSTTM`).\n* How the algorithm checks for data availability before accessing the EPS.\n* How the algorithm handles cases where the EPS might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0012", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the current Total Assets for JPMorgan Chase (JPM) during initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JPM equity data with daily resolution.\n2. Enable fundamental data for JPM.\n3. Immediately after adding the equity, retrieve the JPM `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `FinancialStatements`, are available.\n5. Access the latest Total Assets (`FinancialStatements.BalanceSheet.TotalAssets.Value`) from the `Fundamentals` data. Note: This gives the value from the latest reported balance sheet.\n6. Check if the Total Assets value is available and potentially valid (e.g., greater than zero).\n7. If available, print the Total Assets using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JPM\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access Total Assets via `self.Securities[\"JPM\"].Fundamentals.FinancialStatements.BalanceSheet.TotalAssets.Value`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JPM.\n- The Total Assets fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available Total Assets: \"JPM Initial Total Assets: [value]\"\n- Print output format for unavailable Total Assets: \"JPM Initial Total Assets: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, `FinancialStatements`, and `BalanceSheet` exist before accessing `TotalAssets`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing JPM's latest reported Total Assets at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the Total Assets retrieval happens within `Initialize`.\n* The specific API property used to access the latest Total Assets (`FinancialStatements.BalanceSheet.TotalAssets.Value`).\n* How the algorithm performs nested checks for data availability (Security, Fundamentals, FinancialStatements, BalanceSheet) before accessing the value.\n* How the algorithm handles cases where Total Assets might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0013", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that plots the Operating Margin TTM for Walmart (WMT) daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add WMT equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'WMT Margins' and register a `Series` named 'Operating Margin TTM' associated with that chart.\n3. Schedule an event function (`PlotOpMargin`) to run daily, at market close for WMT.\n4. In `PlotOpMargin`, get the WMT `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the TTM Operating Margin (`OperationRatios.OperatingMargin.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved margin value is valid (not None).\n8. If valid, plot the margin value using the 'Operating Margin TTM' series on the 'WMT Margins' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"WMT\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('WMT Margins')` and `Series('Operating Margin TTM', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('WMT Margins', 'Operating Margin TTM', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"WMT\"), self.TimeRules.AtMarketClose(\"WMT\"), self.PlotOpMargin)`.\n- Must access the TTM Operating Margin via `security.Fundamentals.OperationRatios.OperatingMargin.OneYear`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only WMT.\n- Plotting must occur exactly once per trading day, at market close.\n- The plot must be named 'WMT Margins'.\n- The series must be named 'Operating Margin TTM'.\n- Only plot valid margin figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotOpMargin`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific margin value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting WMT's TTM Operating Margin daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting at market close.\n* The specific API property used to access the TTM Operating Margin (`OperationRatios.OperatingMargin.OneYear`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the margin.\n* Any assumptions made."}
{"prompt_id": "FA-E-0014", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that retrieves and logs the Price-to-Sales (P/S) ratio for Procter & Gamble (PG) daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add PG equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogPsRatio`) to run daily, 20 minutes after market open for PG.\n3. In `LogPsRatio`, get the PG `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the `ValuationRatios.PSRatio` from the `Fundamentals` data.\n6. Log the retrieved P/S ratio using a specific format. If the P/S ratio is unavailable (e.g., zero or None), log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"PG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"PG\"), self.TimeRules.AfterMarketOpen(\"PG\", 20), self.LogPsRatio)`.\n- Must access the P/S ratio via `security.Fundamentals.ValuationRatios.PSRatio`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only PG.\n- The logging action must be scheduled precisely 20 minutes after PG's market open each day.\n- Log output format for available P/S: \"PG P/S Ratio: [value]\"\n- Log output format for unavailable P/S: \"PG P/S Ratio: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogPsRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security` and `security.Fundamentals`) before accessing the P/S ratio.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging PG's daily P/S ratio).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How the `Schedule.On` function is used to trigger the daily logging.\n* The specific API property used to access the P/S ratio (`Fundamentals.ValuationRatios.PSRatio`).\n* How the algorithm checks for data availability before attempting to access the P/S ratio.\n* How the algorithm handles cases where the P/S ratio might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0015", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and print the Industry Name for UnitedHealth Group (UNH) in the `Initialize` function.\n\n**Core Logic Steps:**\n1. In `Initialize`, add UNH equity data with daily resolution.\n2. Enable fundamental data for UNH.\n3. Immediately after adding the equity, retrieve the UNH `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `AssetClassification`, are available.\n5. Access the Industry Group Name (`AssetClassification.MorningstarIndustryGroupName`) from the `Fundamentals` data.\n6. Check if the Industry Group Name value is available (not None or empty).\n7. If available, print the Industry Group Name using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"UNH\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access the Industry Group Name via `self.Securities[\"UNH\"].Fundamentals.AssetClassification.MorningstarIndustryGroupName`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only UNH.\n- The Industry Group Name fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available name: \"UNH Industry Group Name: [value]\"\n- Print output format for unavailable name: \"UNH Industry Group Name: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, and `AssetClassification` exist before accessing `MorningstarIndustryGroupName`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing UNH's Industry Group Name at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the Industry Group Name retrieval happens within `Initialize`.\n* The specific API property used to access the Industry Group Name (`Fundamentals.AssetClassification.MorningstarIndustryGroupName`).\n* How the algorithm performs nested checks for data availability (Security, Fundamentals, AssetClassification) before accessing the value.\n* How the algorithm handles cases where the name might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0016", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to log the annual Free Cash Flow for AAPL when fundamental data becomes available.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AAPL equity data with daily resolution and enable fundamental data.\n2. Implement the `OnFundamentals` method (or equivalent logic in `OnData` by checking `security.Fundamentals` updates).\n3. Store the AAPL symbol object in `Initialize` for comparison (e.g., `self.aapl_symbol`).\n4. Inside the fundamental data handler (`OnFundamentals` or `OnData` block), filter for the AAPL symbol.\n5. Access the annual Free Cash Flow (`FinancialStatements.CashFlowStatement.FreeCashFlow.OneYear`) from the fundamental data object (`fine` or `security.Fundamentals`).\n6. Check if the retrieved Free Cash Flow value is valid (not None).\n7. If valid, log the value using `self.Log` with a specific format.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AAPL\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data, preferably via `OnFundamentals(self, fine)` or by checking `security.Fundamentals` updates in `OnData`.\n- Must access the annual Free Cash Flow via `.FinancialStatements.CashFlowStatement.FreeCashFlow.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AAPL's fundamental updates.\n- Logging must occur *only* when new fundamental data containing the annual Free Cash Flow for AAPL is processed.\n- Log output format: \"AAPL Annual Free Cash Flow (Updated [Date]): [value]\"\n- Only log valid Free Cash Flow figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`fine` object or `security.Fundamentals`, relevant nested properties) before logging.\n- Store the AAPL `Symbol` object in `Initialize` for comparison.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging AAPL's annual Free Cash Flow upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, storing symbol).\n* How fundamental data updates are captured and filtered for AAPL.\n* The specific API property used to access the *annual* Free Cash Flow.\n* How the `Log` function is used with the specified format.\n* How the algorithm checks for data validity before logging.\n* The timing of when the logging occurs (upon fundamental update arrival)."}
{"prompt_id": "FA-E-0017", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that plots the Current Ratio for MSFT daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add MSFT equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'MSFT Ratios' and register a `Series` named 'Current Ratio' associated with that chart.\n3. Schedule an event function (`PlotCurrentRatio`) to run daily, 10 minutes after market open for MSFT.\n4. In `PlotCurrentRatio`, get the MSFT `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the Current Ratio (`OperationRatios.CurrentRatio.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved ratio value is valid (not None).\n8. If valid, plot the ratio value using the 'Current Ratio' series on the 'MSFT Ratios' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"MSFT\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('MSFT Ratios')` and `Series('Current Ratio', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('MSFT Ratios', 'Current Ratio', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"MSFT\"), self.TimeRules.AfterMarketOpen(\"MSFT\", 10), self.PlotCurrentRatio)`.\n- Must access the Current Ratio via `security.Fundamentals.OperationRatios.CurrentRatio.OneYear` (or specify another period like `.ThreeMonths`).\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only MSFT.\n- Plotting must occur exactly once per trading day, 10 minutes after market open.\n- The plot must be named 'MSFT Ratios'.\n- The series must be named 'Current Ratio'.\n- Only plot valid ratio figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotCurrentRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific ratio value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting MSFT's Current Ratio daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting after market open.\n* The specific API property used to access the Current Ratio (specify the period, e.g., `OneYear`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the ratio.\n* Any assumptions made."}
{"prompt_id": "FA-E-0018", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that retrieves and logs the Book Value Per Share for GOOG every trading day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add GOOG equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogBvps`) to run daily, 5 minutes before market close for GOOG.\n3. In `LogBvps`, get the GOOG `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the Book Value Per Share (`ValuationRatios.BookValuePerShare`) from the `Fundamentals` data.\n6. Check if the retrieved BVPS value is valid (not None).\n7. If valid, log the BVPS using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"GOOG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"GOOG\"), self.TimeRules.BeforeMarketClose(\"GOOG\", 5), self.LogBvps)`.\n- Must access the BVPS via `security.Fundamentals.ValuationRatios.BookValuePerShare`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only GOOG.\n- Logging must occur exactly once per trading day, 5 minutes before GOOG's market close.\n- Log output format for available BVPS: \"GOOG Book Value Per Share: [value]\"\n- Log output format for unavailable BVPS: \"GOOG Book Value Per Share: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogBvps`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the BVPS.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging GOOG's daily Book Value Per Share).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging before market close.\n* The specific API property used to access the Book Value Per Share (`ValuationRatios.BookValuePerShare`).\n* How the algorithm checks for data availability before accessing the BVPS.\n* How the algorithm handles cases where the BVPS might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0019", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the Beta value for AMZN in a variable daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AMZN equity data with daily resolution and enable fundamental data.\n2. Declare a class member variable `self.latest_beta` initialized to `None`.\n3. Schedule an event function (`UpdateBeta`) to run daily, at market open for AMZN.\n4. In `UpdateBeta`, get the AMZN `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the Beta (`OperationRatios.Beta.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved Beta value is valid (not None).\n8. If valid, update `self.latest_beta` with the new value and log the update.\n9. If not valid, log that no update occurred.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AMZN\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"AMZN\"), self.TimeRules.AtMarketOpen(\"AMZN\"), self.UpdateBeta)`.\n- Must access the Beta via `security.Fundamentals.OperationRatios.Beta.OneYear` (specify period if different, e.g., `ThreeMonths`).\n- Must store the value in a class member variable named exactly `self.latest_beta`.\n- Must use `self.Log()` to confirm the update or unavailability.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AMZN.\n- The update check must occur exactly once per trading day, precisely at AMZN's market open.\n- The Beta value must be stored in a class variable named `latest_beta`.\n- Log message on successful update: \"AMZN Beta updated to: [value]\"\n- Log message if Beta is unavailable: \"AMZN Beta not available today.\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, variable initialization, scheduling).\n- Implement the scheduled event handler method (`UpdateBeta`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the Beta value itself) before updating the variable.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (storing AMZN's latest Beta value daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, initializing the variable `self.latest_beta`, scheduling).\n* How `Schedule.On` triggers the daily update at market open.\n* The specific API property used to access the Beta (mentioning the `OneYear` period).\n* How the retrieved value is stored in the required class variable `self.latest_beta`.\n* How the algorithm checks for data availability before accessing the Beta.\n* How the algorithm handles cases where the Beta might be unavailable and the corresponding log message.\n* The format of the log messages."}
{"prompt_id": "FA-E-0020", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the latest Trailing Twelve Months Operating Cash Flow for TSLA during initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add TSLA equity data with daily resolution.\n2. Enable fundamental data for TSLA.\n3. Immediately after adding the equity, retrieve the TSLA `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `FinancialStatements` and `CashFlowStatement`, are available.\n5. Access the TTM Operating Cash Flow (`FinancialStatements.CashFlowStatement.OperatingCashFlow.TwelveMonths`) from the `Fundamentals` data.\n6. Check if the Operating Cash Flow value is available (not None).\n7. If available, print the value using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"TSLA\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access TTM Operating Cash Flow via `self.Securities[\"TSLA\"].Fundamentals.FinancialStatements.CashFlowStatement.OperatingCashFlow.TwelveMonths`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only TSLA.\n- The TTM Operating Cash Flow fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available value: \"TSLA Initial Operating Cash Flow (TTM): [value]\"\n- Print output format for unavailable value: \"TSLA Initial Operating Cash Flow (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, `FinancialStatements`, and `CashFlowStatement` exist before accessing `OperatingCashFlow.TwelveMonths`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing TSLA's latest TTM Operating Cash Flow at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the retrieval happens within `Initialize`.\n* The specific API property used to access the TTM Operating Cash Flow.\n* How the algorithm performs nested checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0021", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Return on Assets (ROA) TTM for NVDA daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add NVDA equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogRoa`) to run daily, 40 minutes after market open for NVDA.\n3. In `LogRoa`, get the NVDA `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Return on Assets (`OperationRatios.ROA.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved ROA value is valid (not None).\n7. If valid, log the ROA using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"NVDA\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"NVDA\"), self.TimeRules.AfterMarketOpen(\"NVDA\", 40), self.LogRoa)`.\n- Must access the ROA via `security.Fundamentals.OperationRatios.ROA.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only NVDA.\n- Logging must occur exactly once per trading day, 40 minutes after NVDA's market open.\n- Log output format for available ROA: \"NVDA ROA (TTM): [value]\"\n- Log output format for unavailable ROA: \"NVDA ROA (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogRoa`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the ROA.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging NVDA's daily TTM ROA).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access the TTM Return on Assets (`OperationRatios.ROA.OneYear`).\n* How the algorithm checks for data availability before accessing the ROA.\n* How the algorithm handles cases where the ROA might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0022", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Gross Profit for JNJ when new fundamental data arrives.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JNJ equity data with daily resolution and enable fundamental data.\n2. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n3. Store the JNJ symbol object in `Initialize` (e.g., `self.jnj_symbol`).\n4. Create a `Chart` named 'JNJ Annual Financials' and register a `Series` named 'Gross Profit' in `Initialize`.\n5. Inside the fundamental data handler, filter for the JNJ symbol.\n6. Access the annual Gross Profit (`FinancialStatements.IncomeStatement.GrossProfit.OneYear`) from the fundamental data object.\n7. Check if the retrieved Gross Profit value is valid (not None).\n8. If valid, plot the value using the 'Gross Profit' series on the 'JNJ Annual Financials' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JNJ\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must use `Chart('JNJ Annual Financials')` and `Series('Gross Profit', SeriesType.Line, 0)` for plot setup.\n- Must access the annual Gross Profit via `.FinancialStatements.IncomeStatement.GrossProfit.OneYear`.\n- Must use `self.Plot('JNJ Annual Financials', 'Gross Profit', value)`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JNJ's fundamental updates.\n- Plotting must occur *only* when new fundamental data for JNJ is processed.\n- The plot must be named 'JNJ Annual Financials'.\n- The series must be named 'Gross Profit'.\n- Only plot valid Gross Profit figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, plot creation, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability before plotting.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting JNJ's annual Gross Profit upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, creating chart/series, storing symbol).\n* How fundamental data updates are captured and filtered for JNJ.\n* The specific API property used to access the *annual* Gross Profit.\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data validity before plotting.\n* The timing of when the plotting occurs."}
{"prompt_id": "FA-E-0023", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Shares Outstanding for META daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add META equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogSharesOutstanding`) to run daily, 5 minutes after market open for META.\n3. In `LogSharesOutstanding`, get the META `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `CompanyProfile`, are available.\n5. Access the Shares Outstanding (`CompanyProfile.SharesOutstanding`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None and potentially > 0).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"META\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"META\"), self.TimeRules.AfterMarketOpen(\"META\", 5), self.LogSharesOutstanding)`.\n- Must access Shares Outstanding via `security.Fundamentals.CompanyProfile.SharesOutstanding`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only META.\n- Logging must occur exactly once per trading day, 5 minutes after META's market open.\n- Log output format for available value: \"META Shares Outstanding: [value]\"\n- Log output format for unavailable value: \"META Shares Outstanding: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogSharesOutstanding`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability (`security`, `security.Fundamentals`, `CompanyProfile`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging META's daily Shares Outstanding).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access Shares Outstanding (`CompanyProfile.SharesOutstanding`).\n* How the algorithm performs nested checks for data availability.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0024", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the CIK number for BRK.B during algorithm initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add BRK.B equity data with daily resolution.\n2. Enable fundamental data for BRK.B.\n3. Immediately after adding the equity, retrieve the BRK.B `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `CompanyReference`, are available.\n5. Access the CIK number (`CompanyReference.Cik`) from the `Fundamentals` data.\n6. Check if the CIK value is available (not None or 0 or empty string).\n7. If available, print the CIK using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"BRK.B\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access the CIK via `self.Securities[\"BRK.B\"].Fundamentals.CompanyReference.Cik`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only BRK.B.\n- The CIK fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available CIK: \"BRK.B CIK: [value]\"\n- Print output format for unavailable CIK: \"BRK.B CIK: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, and `CompanyReference` exist before accessing `Cik`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing BRK.B's CIK at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the CIK retrieval happens within `Initialize`.\n* The specific API property used to access the CIK (`Fundamentals.CompanyReference.Cik`).\n* How the algorithm performs nested checks for data availability before accessing the value.\n* How the algorithm handles cases where the CIK might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0025", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and plots the Payout Ratio for V daily, if available.\n\n**Core Logic Steps:**\n1. In `Initialize`, add V equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'V Ratios' and register a `Series` named 'Payout Ratio' associated with that chart.\n3. Schedule an event function (`PlotPayoutRatio`) to run daily, 15 minutes after market open for V.\n4. In `PlotPayoutRatio`, get the V `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the Payout Ratio (`OperationRatios.PayoutRatio.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved ratio value is valid (not None).\n8. If valid, plot the ratio value using the 'Payout Ratio' series on the 'V Ratios' chart.\n9. If the ratio is not available, do not plot anything for that day.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"V\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('V Ratios')` and `Series('Payout Ratio', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('V Ratios', 'Payout Ratio', value)` to plot the data *only* if the value is valid.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"V\"), self.TimeRules.AfterMarketOpen(\"V\", 15), self.PlotPayoutRatio)`.\n- Must access the Payout Ratio via `security.Fundamentals.OperationRatios.PayoutRatio.OneYear`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only V.\n- Plotting must be attempted exactly once per trading day, 15 minutes after market open.\n- The plot must be named 'V Ratios'.\n- The series must be named 'Payout Ratio'.\n- *Crucially*, only plot if the Payout Ratio value is available and not None. No plotting should occur if the data is missing for that day.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotPayoutRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific ratio value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting V's Payout Ratio daily, only when available).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting attempt.\n* The specific API property used to access the Payout Ratio (`OperationRatios.PayoutRatio.OneYear`).\n* How the `Plot` function is used conditionally based on data availability.\n* The importance of the check for data availability (`value is not None`) before plotting.\n* How the algorithm handles missing data (by simply not plotting for that day)." }
{"prompt_id": "FA-E-0026", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that logs the Sales Per Share TTM for JPM every trading day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JPM equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogSpsTtm`) to run daily, 25 minutes after market open for JPM.\n3. In `LogSpsTtm`, get the JPM `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Sales Per Share (`ValuationRatios.SalesPerShareTTM`) from the `Fundamentals` data.\n6. Check if the retrieved SPS value is valid (not None).\n7. If valid, log the SPS using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JPM\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"JPM\"), self.TimeRules.AfterMarketOpen(\"JPM\", 25), self.LogSpsTtm)`.\n- Must access the TTM SPS via `security.Fundamentals.ValuationRatios.SalesPerShareTTM`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JPM.\n- Logging must occur exactly once per trading day, 25 minutes after JPM's market open.\n- Log output format for available SPS: \"JPM Sales Per Share (TTM): [value]\"\n- Log output format for unavailable SPS: \"JPM Sales Per Share (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogSpsTtm`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the SPS.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging JPM's daily TTM Sales Per Share).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access the TTM Sales Per Share (`ValuationRatios.SalesPerShareTTM`).\n* How the algorithm checks for data availability before accessing the SPS.\n* How the algorithm handles cases where the SPS might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0027", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest annual Total Liabilities for WMT in a variable.\n\n**Core Logic Steps:**\n1. In `Initialize`, add WMT equity data with daily resolution and enable fundamental data.\n2. Declare a class member variable `self.latest_total_liabilities` initialized to `None`.\n3. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n4. Store the WMT symbol object in `Initialize` (e.g., `self.wmt_symbol`).\n5. Inside the fundamental data handler, filter for the WMT symbol.\n6. Access the annual Total Liabilities (`FinancialStatements.BalanceSheet.TotalLiabilities.OneYear`) from the fundamental data object.\n7. Check if the retrieved value is valid (not None).\n8. If valid, update `self.latest_total_liabilities` with the new value and log the update.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"WMT\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must access the annual Total Liabilities via `.FinancialStatements.BalanceSheet.TotalLiabilities.OneYear`.\n- Must store the value in a class member variable named exactly `self.latest_total_liabilities`.\n- Must use `self.Log()` to confirm the update.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only WMT's fundamental updates.\n- The variable update must occur *only* when new fundamental data for WMT is processed.\n- The value must be stored in a class variable named `latest_total_liabilities`.\n- Log message on successful update: \"WMT Annual Total Liabilities updated to: [value] on [Date]\"\n- If the value is unavailable in an update, no update to the variable should occur, and no log message is required for this specific case.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, variable initialization, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability (`fine` or `security.Fundamentals`, `FinancialStatements`, `BalanceSheet`) before accessing the value and updating the variable.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (storing WMT's latest annual Total Liabilities upon fundamental update).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, initializing `self.latest_total_liabilities`, storing symbol).\n* How fundamental data updates are captured and filtered for WMT.\n* The specific API property used to access the *annual* Total Liabilities.\n* How the retrieved value is stored in the required class variable `self.latest_total_liabilities`.\n* How the algorithm checks for data availability before accessing the value.\n* The timing of the variable update (only upon receiving new fundamental data).\n* The format of the log message upon successful update."}
{"prompt_id": "FA-E-0028", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the PEG Ratio for PG daily if the value is positive.\n\n**Core Logic Steps:**\n1. In `Initialize`, add PG equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`PrintPositivePegRatio`) to run daily, 50 minutes after market open for PG.\n3. In `PrintPositivePegRatio`, get the PG `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the PEG Ratio (`ValuationRatios.PEGRatio`) from the `Fundamentals` data.\n6. Check if the retrieved PEG ratio is valid (not None) AND positive (> 0).\n7. If valid and positive, print the ratio using `self.Log`.\n8. If the ratio is not available, None, zero, or negative, do nothing (no print/log output).\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"PG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"PG\"), self.TimeRules.AfterMarketOpen(\"PG\", 50), self.PrintPositivePegRatio)`.\n- Must access the PEG ratio via `security.Fundamentals.ValuationRatios.PEGRatio`.\n- Must use `self.Log()` for printing the output *only* when the condition is met.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only PG.\n- The check must occur exactly once per trading day, 50 minutes after PG's market open.\n- Printing/logging must *only* occur if the PEG ratio is available, not None, AND strictly greater than 0.\n- Print output format if condition met: \"PG Positive PEG Ratio: [value]\"\n- No output should be generated if the PEG ratio is unavailable or not positive.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`PrintPositivePegRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the PEG ratio value itself) before applying the positivity check.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing PG's daily PEG ratio only if positive).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data, scheduling).\n* How the `Schedule.On` function is used to trigger the daily check.\n* The specific API property used to access the PEG ratio (`ValuationRatios.PEGRatio`).\n* The exact condition required for printing (`value is not None and value > 0`).\n* How the algorithm handles cases where the PEG ratio is unavailable or not positive (by doing nothing).\n* The format of the log output when the condition is met."}
{"prompt_id": "FA-E-0029", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Asset Turnover TTM for UNH daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add UNH equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogAssetTurnover`) to run daily, 1 hour before market close for UNH.\n3. In `LogAssetTurnover`, get the UNH `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Asset Turnover (`OperationRatios.AssetsTurnover.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"UNH\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"UNH\"), self.TimeRules.BeforeMarketClose(\"UNH\", 60), self.LogAssetTurnover)`.\n- Must access the TTM Asset Turnover via `security.Fundamentals.OperationRatios.AssetsTurnover.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only UNH.\n- Logging must occur exactly once per trading day, 1 hour before UNH's market close.\n- Log output format for available value: \"UNH Asset Turnover (TTM): [value]\"\n- Log output format for unavailable value: \"UNH Asset Turnover (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogAssetTurnover`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging UNH's daily TTM Asset Turnover).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging before market close.\n* The specific API property used to access the TTM Asset Turnover (`OperationRatios.AssetsTurnover.OneYear`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0030", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the EBITDA TTM for AAPL when fundamental data is updated.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AAPL equity data with daily resolution and enable fundamental data.\n2. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n3. Store the AAPL symbol object in `Initialize` (e.g., `self.aapl_symbol`).\n4. Create a `Chart` named 'AAPL Financials' and register a `Series` named 'EBITDA TTM' in `Initialize`.\n5. Inside the fundamental data handler, filter for the AAPL symbol.\n6. Access the TTM EBITDA (`FinancialStatements.IncomeStatement.EBITDA.TwelveMonths`) from the fundamental data object.\n7. Check if the retrieved EBITDA value is valid (not None).\n8. If valid, plot the value using the 'EBITDA TTM' series on the 'AAPL Financials' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AAPL\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must use `Chart('AAPL Financials')` and `Series('EBITDA TTM', SeriesType.Line, 0)` for plot setup.\n- Must access the TTM EBITDA via `.FinancialStatements.IncomeStatement.EBITDA.TwelveMonths`.\n- Must use `self.Plot('AAPL Financials', 'EBITDA TTM', value)`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AAPL's fundamental updates.\n- Plotting must occur *only* when new fundamental data for AAPL is processed.\n- The plot must be named 'AAPL Financials'.\n- The series must be named 'EBITDA TTM'.\n- Only plot valid EBITDA figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, plot creation, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability before plotting.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting AAPL's TTM EBITDA upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, creating chart/series, storing symbol).\n* How fundamental data updates are captured and filtered for AAPL.\n* The specific API property used to access the *TTM* EBITDA.\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data validity before plotting.\n* The timing of when the plotting occurs."}
{"prompt_id": "FA-E-0031", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Net Margin TTM for MSFT daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add MSFT equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogNetMargin`) to run daily, 55 minutes after market open for MSFT.\n3. In `LogNetMargin`, get the MSFT `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Net Margin (`OperationRatios.NetMargin.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved margin value is valid (not None).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"MSFT\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"MSFT\"), self.TimeRules.AfterMarketOpen(\"MSFT\", 55), self.LogNetMargin)`.\n- Must access the TTM Net Margin via `security.Fundamentals.OperationRatios.NetMargin.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only MSFT.\n- Logging must occur exactly once per trading day, 55 minutes after MSFT's market open.\n- Log output format for available margin: \"MSFT Net Margin (TTM): [value]\"\n- Log output format for unavailable margin: \"MSFT Net Margin (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogNetMargin`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging MSFT's daily TTM Net Margin).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access the TTM Net Margin (`OperationRatios.NetMargin.OneYear`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0032", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Country ID for GOOG during initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add GOOG equity data with daily resolution.\n2. Enable fundamental data for GOOG.\n3. Immediately after adding the equity, retrieve the GOOG `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `CompanyReference`, are available.\n5. Access the Country ID (`CompanyReference.CountryId`) from the `Fundamentals` data.\n6. Check if the Country ID value is available (not None or empty string).\n7. If available, print the Country ID using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"GOOG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access the Country ID via `self.Securities[\"GOOG\"].Fundamentals.CompanyReference.CountryId`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only GOOG.\n- The Country ID fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available ID: \"GOOG Country ID: [value]\"\n- Print output format for unavailable ID: \"GOOG Country ID: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, and `CompanyReference` exist before accessing `CountryId`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing GOOG's Country ID at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the Country ID retrieval happens within `Initialize`.\n* The specific API property used to access the Country ID (`Fundamentals.CompanyReference.CountryId`).\n* How the algorithm performs nested checks for data availability before accessing the value.\n* How the algorithm handles cases where the ID might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0033", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and plots the Cash Return for AMZN daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AMZN equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'AMZN Ratios' and register a `Series` named 'Cash Return' associated with that chart.\n3. Schedule an event function (`PlotCashReturn`) to run daily, at market close for AMZN.\n4. In `PlotCashReturn`, get the AMZN `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the TTM Cash Return (`OperationRatios.CashReturn.OneYear`) from the `Fundamentals` data.\n7. Check if the retrieved value is valid (not None).\n8. If valid, plot the value using the 'Cash Return' series on the 'AMZN Ratios' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AMZN\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('AMZN Ratios')` and `Series('Cash Return', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('AMZN Ratios', 'Cash Return', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"AMZN\"), self.TimeRules.AtMarketClose(\"AMZN\"), self.PlotCashReturn)`.\n- Must access the Cash Return via `security.Fundamentals.OperationRatios.CashReturn.OneYear`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AMZN.\n- Plotting must occur exactly once per trading day, at market close.\n- The plot must be named 'AMZN Ratios'.\n- The series must be named 'Cash Return'.\n- Only plot valid figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotCashReturn`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting AMZN's TTM Cash Return daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting at market close.\n* The specific API property used to access the TTM Cash Return (`OperationRatios.CashReturn.OneYear`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the value.\n* Any assumptions made."}
{"prompt_id": "FA-E-0034", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that logs the Earnings Yield for TSLA every trading day.\n\n**Core Logic Steps:**\n1. In `Initialize`, add TSLA equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogEarningsYield`) to run daily, 35 minutes after market open for TSLA.\n3. In `LogEarningsYield`, get the TSLA `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the Earnings Yield (`ValuationRatios.EarningsYield`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"TSLA\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"TSLA\"), self.TimeRules.AfterMarketOpen(\"TSLA\", 35), self.LogEarningsYield)`.\n- Must access the Earnings Yield via `security.Fundamentals.ValuationRatios.EarningsYield`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only TSLA.\n- Logging must occur exactly once per trading day, 35 minutes after TSLA's market open.\n- Log output format for available value: \"TSLA Earnings Yield: [value]\"\n- Log output format for unavailable value: \"TSLA Earnings Yield: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogEarningsYield`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging TSLA's daily Earnings Yield).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging after market open.\n* The specific API property used to access the Earnings Yield (`ValuationRatios.EarningsYield`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0035", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest annual Research And Development expense for NVDA.\n\n**Core Logic Steps:**\n1. In `Initialize`, add NVDA equity data with daily resolution and enable fundamental data.\n2. Declare a class member variable `self.latest_rnd_expense` initialized to `None`.\n3. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n4. Store the NVDA symbol object in `Initialize` (e.g., `self.nvda_symbol`).\n5. Inside the fundamental data handler, filter for the NVDA symbol.\n6. Access the annual R&D expense (`FinancialStatements.IncomeStatement.ResearchAndDevelopment.OneYear`) from the fundamental data object.\n7. Check if the retrieved value is valid (not None).\n8. If valid, update `self.latest_rnd_expense` with the new value and log the update.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"NVDA\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must access the annual R&D expense via `.FinancialStatements.IncomeStatement.ResearchAndDevelopment.OneYear`.\n- Must store the value in a class member variable named exactly `self.latest_rnd_expense`.\n- Must use `self.Log()` to confirm the update.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only NVDA's fundamental updates.\n- The variable update must occur *only* when new fundamental data for NVDA is processed.\n- The value must be stored in a class variable named `latest_rnd_expense`.\n- Log message on successful update: \"NVDA Annual R&D Expense updated to: [value] on [Date]\"\n- If the value is unavailable in an update, no update to the variable should occur.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, variable initialization, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability before accessing the value and updating the variable.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (storing NVDA's latest annual R&D expense upon fundamental update).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, initializing `self.latest_rnd_expense`, storing symbol).\n* How fundamental data updates are captured and filtered for NVDA.\n* The specific API property used to access the *annual* R&D expense.\n* How the retrieved value is stored in the required class variable `self.latest_rnd_expense`.\n* How the algorithm checks for data availability before accessing the value.\n* The timing of the variable update (only upon receiving new fundamental data).\n* The format of the log message upon successful update."}
{"prompt_id": "FA-E-0036", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the EV/EBITDA ratio for JNJ daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JNJ equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`PrintEvEbitda`) to run daily, 1 hour after market open for JNJ.\n3. In `PrintEvEbitda`, get the JNJ `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the EV/EBITDA ratio (`ValuationRatios.ForwardEVEBITDA` or `ValuationRatios.EnterpriseValueEBITDA`) from the `Fundamentals` data. Choose one and specify it.\n6. Check if the retrieved value is valid (not None).\n7. If valid, print the value using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JNJ\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"JNJ\"), self.TimeRules.AfterMarketOpen(\"JNJ\", 60), self.PrintEvEbitda)`.\n- Must access the EV/EBITDA ratio via `security.Fundamentals.ValuationRatios.ForwardEVEBITDA` (or `EnterpriseValueEBITDA`).\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JNJ.\n- Printing must occur exactly once per trading day, 1 hour after JNJ's market open.\n- Use `ForwardEVEBITDA` specifically.\n- Print output format for available value: \"JNJ Forward EV/EBITDA: [value]\"\n- Print output format for unavailable value: \"JNJ Forward EV/EBITDA: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`PrintEvEbitda`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing JNJ's daily Forward EV/EBITDA ratio).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily printing after market open.\n* The specific API property used (`ValuationRatios.ForwardEVEBITDA`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0037", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Inventory Turnover TTM for META daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add META equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogInventoryTurnover`) to run daily, 20 minutes before market close for META.\n3. In `LogInventoryTurnover`, get the META `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the TTM Inventory Turnover (`OperationRatios.InventoryTurnover.OneYear`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"META\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"META\"), self.TimeRules.BeforeMarketClose(\"META\", 20), self.LogInventoryTurnover)`.\n- Must access the TTM Inventory Turnover via `security.Fundamentals.OperationRatios.InventoryTurnover.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only META.\n- Logging must occur exactly once per trading day, 20 minutes before META's market close.\n- Log output format for available value: \"META Inventory Turnover (TTM): [value]\"\n- Log output format for unavailable value: \"META Inventory Turnover (TTM): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogInventoryTurnover`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging META's daily TTM Inventory Turnover).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging before market close.\n* The specific API property used (`OperationRatios.InventoryTurnover.OneYear`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0038", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Free Cash Flow Yield (FCFYield) for BRK.B daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add BRK.B equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'BRK.B Yields' and register a `Series` named 'FCF Yield' associated with that chart.\n3. Schedule an event function (`PlotFcfYield`) to run daily, at market close for BRK.B.\n4. In `PlotFcfYield`, get the BRK.B `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property are available.\n6. Access the FCF Yield (`ValuationRatios.FCFYield`) from the `Fundamentals` data.\n7. Check if the retrieved value is valid (not None).\n8. If valid, plot the value using the 'FCF Yield' series on the 'BRK.B Yields' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"BRK.B\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('BRK.B Yields')` and `Series('FCF Yield', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('BRK.B Yields', 'FCF Yield', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"BRK.B\"), self.TimeRules.AtMarketClose(\"BRK.B\"), self.PlotFcfYield)`.\n- Must access the FCF Yield via `security.Fundamentals.ValuationRatios.FCFYield`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only BRK.B.\n- Plotting must occur exactly once per trading day, at market close.\n- The plot must be named 'BRK.B Yields'.\n- The series must be named 'FCF Yield'.\n- Only plot valid figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotFcfYield`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, and the specific value) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting BRK.B's FCF Yield daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting at market close.\n* The specific API property used to access the FCF Yield (`ValuationRatios.FCFYield`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the value.\n* Any assumptions made."}
{"prompt_id": "FA-E-0039", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Price/Cash Flow Per Share Ratio (PCFSRatio) for V daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add V equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`LogPcfsRatio`) to run daily, 45 minutes before market close for V.\n3. In `LogPcfsRatio`, get the V `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property are available.\n5. Access the Price/Cash Flow Per Share Ratio (`ValuationRatios.PCFSRatio`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log`; otherwise, log 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"V\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"V\"), self.TimeRules.BeforeMarketClose(\"V\", 45), self.LogPcfsRatio)`.\n- Must access the ratio via `security.Fundamentals.ValuationRatios.PCFSRatio`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only V.\n- Logging must occur exactly once per trading day, 45 minutes before V's market close.\n- Log output format for available value: \"V PCFS Ratio: [value]\"\n- Log output format for unavailable value: \"V PCFS Ratio: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`LogPcfsRatio`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging V's daily Price/Cash Flow Per Share Ratio).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily logging before market close.\n* The specific API property used (`ValuationRatios.PCFSRatio`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (logging 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0040", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Headquarters City for JPM during initialization.\n\n**Core Logic Steps:**\n1. In `Initialize`, add JPM equity data with daily resolution.\n2. Enable fundamental data for JPM.\n3. Immediately after adding the equity, retrieve the JPM `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `CompanyProfile`, are available.\n5. Access the Headquarters City (`CompanyProfile.HeadQuarterCity`) from the `Fundamentals` data.\n6. Check if the City value is available (not None or empty string).\n7. If available, print the City using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"JPM\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `self.UniverseSettings.Asynchronous = True` or `security.SetFundamentalsRequired(True)`).\n- Must access the City via `self.Securities[\"JPM\"].Fundamentals.CompanyProfile.HeadQuarterCity`.\n- Must use `self.Log()` for output within the `Initialize` method.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only JPM.\n- The City fetching and printing must occur only once during the `Initialize` phase, after the security and its fundamental data are likely available.\n- Print output format for available city: \"JPM Headquarters City: [value]\"\n- Print output format for unavailable city: \"JPM Headquarters City: N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks immediately after `AddEquity` to ensure the security object, `Fundamentals`, and `CompanyProfile` exist before accessing `HeadQuarterCity`.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing JPM's Headquarters City at initialization).\n* Key setup steps in `Initialize` (adding equity, enabling fundamental data).\n* Why the City retrieval happens within `Initialize`.\n* The specific API property used (`Fundamentals.CompanyProfile.HeadQuarterCity`).\n* How the algorithm performs nested checks for data availability before accessing the value.\n* How the algorithm handles cases where the city might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0041", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and logs the annual Interest Expense for WMT.\n\n**Core Logic Steps:**\n1. In `Initialize`, add WMT equity data with daily resolution and enable fundamental data.\n2. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n3. Store the WMT symbol object in `Initialize` (e.g., `self.wmt_symbol`).\n4. Inside the fundamental data handler, filter for the WMT symbol.\n5. Access the annual Interest Expense (`FinancialStatements.IncomeStatement.InterestExpense.OneYear`) from the fundamental data object.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log` with a specific format.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"WMT\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must access the annual Interest Expense via `.FinancialStatements.IncomeStatement.InterestExpense.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only WMT's fundamental updates.\n- Logging must occur *only* when new fundamental data containing the annual Interest Expense for WMT is processed.\n- Log output format: \"WMT Annual Interest Expense (Updated [Date]): [value]\"\n- Only log valid figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability before logging.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging WMT's annual Interest Expense upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, storing symbol).\n* How fundamental data updates are captured and filtered for WMT.\n* The specific API property used to access the *annual* Interest Expense.\n* How the `Log` function is used with the specified format.\n* How the algorithm checks for data validity before logging.\n* The timing of when the logging occurs (upon fundamental update arrival)."}
{"prompt_id": "FA-E-0042", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Price Fair Value (Morningstar) for PG daily, if available.\n\n**Core Logic Steps:**\n1. In `Initialize`, add PG equity data with daily resolution and enable fundamental data.\n2. Create a `Chart` named 'PG Valuation' and register a `Series` named 'Morningstar Fair Value' associated with that chart.\n3. Schedule an event function (`PlotFairValue`) to run daily, 30 minutes after market open for PG.\n4. In `PlotFairValue`, get the PG `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property, specifically `ValuationRatios`, are available.\n6. Access the Morningstar Fair Value (`ValuationRatios.MorningstarFairValue`) from the `Fundamentals` data.\n7. Check if the retrieved value is valid (not None and potentially > 0).\n8. If valid, plot the value using the 'Morningstar Fair Value' series on the 'PG Valuation' chart.\n9. If the value is not available, do not plot anything for that day.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"PG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('PG Valuation')` and `Series('Morningstar Fair Value', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('PG Valuation', 'Morningstar Fair Value', value)` to plot the data *only* if the value is valid.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"PG\"), self.TimeRules.AfterMarketOpen(\"PG\", 30), self.PlotFairValue)`.\n- Must access the value via `security.Fundamentals.ValuationRatios.MorningstarFairValue`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only PG.\n- Plotting must be attempted exactly once per trading day, 30 minutes after market open.\n- The plot must be named 'PG Valuation'.\n- The series must be named 'Morningstar Fair Value'.\n- *Crucially*, only plot if the Fair Value is available, not None, and greater than 0. No plotting if data is missing or invalid.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotFairValue`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, `ValuationRatios`, and the value itself) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting PG's Morningstar Fair Value daily, only when available and valid).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting attempt.\n* The specific API property used (`ValuationRatios.MorningstarFairValue`).\n* How the `Plot` function is used conditionally based on data availability and validity (`value is not None and value > 0`).\n* How the algorithm handles missing or invalid data (by not plotting).\n* A note about the source and potential availability of Morningstar data."}
{"prompt_id": "FA-E-0043", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest TTM Selling, General & Administrative (SG&A) expense for UNH.\n\n**Core Logic Steps:**\n1. In `Initialize`, add UNH equity data with daily resolution and enable fundamental data.\n2. Declare a class member variable `self.latest_sga_expense_ttm` initialized to `None`.\n3. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n4. Store the UNH symbol object in `Initialize` (e.g., `self.unh_symbol`).\n5. Inside the fundamental data handler, filter for the UNH symbol.\n6. Access the TTM SG&A expense (`FinancialStatements.IncomeStatement.SellingGeneralAndAdministration.TwelveMonths`) from the fundamental data object.\n7. Check if the retrieved value is valid (not None).\n8. If valid, update `self.latest_sga_expense_ttm` with the new value and log the update.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"UNH\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must access the TTM SG&A expense via `.FinancialStatements.IncomeStatement.SellingGeneralAndAdministration.TwelveMonths`.\n- Must store the value in a class member variable named exactly `self.latest_sga_expense_ttm`.\n- Must use `self.Log()` to confirm the update.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only UNH's fundamental updates.\n- The variable update must occur *only* when new fundamental data for UNH is processed.\n- The value must be stored in a class variable named `latest_sga_expense_ttm`.\n- Log message on successful update: \"UNH SG&A Expense (TTM) updated to: [value] on [Date]\"\n- If the value is unavailable in an update, no update to the variable should occur.\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, variable initialization, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability before accessing the value and updating the variable.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (storing UNH's latest TTM SG&A expense upon fundamental update).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, initializing `self.latest_sga_expense_ttm`, storing symbol).\n* How fundamental data updates are captured and filtered for UNH.\n* The specific API property used to access the *TTM* SG&A expense.\n* How the retrieved value is stored in the required class variable `self.latest_sga_expense_ttm`.\n* How the algorithm checks for data availability before accessing the value.\n* The timing of the variable update (only upon receiving new fundamental data).\n* The format of the log message upon successful update."}
{"prompt_id": "FA-E-0044", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Revenue Growth (3 year average) for AAPL daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add AAPL equity data with daily resolution and enable fundamental data.\n2. Schedule an event function (`PrintRevenueGrowth`) to run daily, 10 minutes before market close for AAPL.\n3. In `PrintRevenueGrowth`, get the AAPL `Security` object.\n4. Check if the `Security` object and its `Fundamentals` property, specifically `OperationRatios`, are available.\n5. Access the 3-Year Revenue Growth (`OperationRatios.RevenueGrowth.ThreeYears`) from the `Fundamentals` data.\n6. Check if the retrieved value is valid (not None).\n7. If valid, print the value using `self.Log`; otherwise, print 'N/A'.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"AAPL\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"AAPL\"), self.TimeRules.BeforeMarketClose(\"AAPL\", 10), self.PrintRevenueGrowth)`.\n- Must access the 3Y Revenue Growth via `security.Fundamentals.OperationRatios.RevenueGrowth.ThreeYears`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only AAPL.\n- Printing must occur exactly once per trading day, 10 minutes before AAPL's market close.\n- Print output format for available value: \"AAPL Revenue Growth (3Y Avg): [value]\"\n- Print output format for unavailable value: \"AAPL Revenue Growth (3Y Avg): N/A\"\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, scheduling).\n- Implement the scheduled event handler method (`PrintRevenueGrowth`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability (`security`, `security.Fundamentals`, `OperationRatios`) before accessing the value.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (printing AAPL's daily 3-Year Average Revenue Growth).\n* Key setup steps in `Initialize` (adding equity, fundamental data, scheduling).\n* How `Schedule.On` triggers the daily printing before market close.\n* The specific API property used (`OperationRatios.RevenueGrowth.ThreeYears`).\n* How the algorithm checks for data availability before accessing the value.\n* How the algorithm handles cases where the value might be unavailable (printing 'N/A').\n* The format of the log output."}
{"prompt_id": "FA-E-0045", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the annual Capital Expenditures for MSFT when fundamental data arrives.\n\n**Core Logic Steps:**\n1. In `Initialize`, add MSFT equity data with daily resolution and enable fundamental data.\n2. Implement the `OnFundamentals` method (or equivalent logic in `OnData`).\n3. Store the MSFT symbol object in `Initialize` (e.g., `self.msft_symbol`).\n4. Inside the fundamental data handler, filter for the MSFT symbol.\n5. Access the annual Capital Expenditures (`FinancialStatements.CashFlowStatement.CapitalExpenditure.OneYear`) from the fundamental data object.\n6. Check if the retrieved value is valid (not None).\n7. If valid, log the value using `self.Log` with a specific format.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"MSFT\", Resolution.Daily)`.\n- Must enable fundamental data reception (e.g., `security.SetFundamentalsRequired(True)` or `AddUniverse`).\n- Must handle fundamental data updates, preferably via `OnFundamentals(self, fine)`.\n- Must access the annual CapEx via `.FinancialStatements.CashFlowStatement.CapitalExpenditure.OneYear`.\n- Must use `self.Log()` for output.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only MSFT's fundamental updates.\n- Logging must occur *only* when new fundamental data containing the annual CapEx for MSFT is processed.\n- Log output format: \"MSFT Annual Capital Expenditures (Updated [Date]): [value]\"\n- Only log valid figures (check for availability/None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with setup (data request, enabling fundamentals, symbol storage).\n- Implement the method handling fundamental data updates (`OnFundamentals` or equivalent `OnData` logic).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include nested checks for data availability before logging.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (logging MSFT's annual CapEx upon fundamental updates).\n* Key setup steps in `Initialize` (adding equity, enabling fundamentals, storing symbol).\n* How fundamental data updates are captured and filtered for MSFT.\n* The specific API property used to access the *annual* Capital Expenditures.\n* How the `Log` function is used with the specified format.\n* How the algorithm checks for data validity before logging.\n* The timing of when the logging occurs (upon fundamental update arrival)."}
{"prompt_id": "FA-E-0046", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Price Change 1 Month for GOOG daily.\n\n**Core Logic Steps:**\n1. In `Initialize`, add GOOG equity data with daily resolution and enable fundamental data (needed for performance metrics).\n2. Create a `Chart` named 'GOOG Performance' and register a `Series` named 'Price Change 1M' associated with that chart.\n3. Schedule an event function (`PlotPriceChange1M`) to run daily, at market open for GOOG.\n4. In `PlotPriceChange1M`, get the GOOG `Security` object.\n5. Check if the `Security` object and its `Fundamentals` property, specifically `PerformanceRatios`, are available.\n6. Access the 1-Month Price Change (`PerformanceRatios.OneMonthPriceChange`) from the `Fundamentals` data.\n7. Check if the retrieved value is valid (not None).\n8. If valid, plot the value (which is typically a percentage) using the 'Price Change 1M' series on the 'GOOG Performance' chart.\n\n**Specific LEAN API Usage:**\n- Must use `self.AddEquity(\"GOOG\", Resolution.Daily)`.\n- Must enable fundamental data (e.g., `security.SetFundamentalsRequired(True)`).\n- Must use `Chart('GOOG Performance')` and `Series('Price Change 1M', SeriesType.Line, 0)` for plot setup in `Initialize`.\n- Must use `self.Plot('GOOG Performance', 'Price Change 1M', value)` to plot the data.\n- Must use `self.Schedule.On(self.DateRules.EveryDay(\"GOOG\"), self.TimeRules.AtMarketOpen(\"GOOG\"), self.PlotPriceChange1M)`.\n- Must access the value via `security.Fundamentals.PerformanceRatios.OneMonthPriceChange`.\n\n**Explicit Constraints and Formatting:**\n- The algorithm must target only GOOG.\n- Plotting must occur exactly once per trading day, at market open.\n- The plot must be named 'GOOG Performance'.\n- The series must be named 'Price Change 1M'.\n- Only plot valid figures (must check if the value is available and not None).\n\n**Essential Supporting Components:**\n- Include the `Initialize` method with necessary setup (data request, enabling fundamentals, plot creation, scheduling).\n- Implement the scheduled event handler method (`PlotPriceChange1M`).\n- Ensure the `QCAlgorithm` class structure is correctly implemented.\n- Include checks for data availability (`security`, `security.Fundamentals`, `PerformanceRatios`, and the value itself) before attempting to plot.\n\n**Required Explanation:**\nProvide a detailed explanation covering AT LEAST:\n* The overall purpose of the algorithm (plotting GOOG's 1-Month Price Change daily).\n* Key setup steps in `Initialize` (adding equity, fundamental data, creating chart/series, scheduling).\n* How `Schedule.On` triggers the daily plotting at market open.\n* The specific API property used (`PerformanceRatios.OneMonthPriceChange`).\n* How the `Plot` function is used with the specified chart and series names.\n* How the algorithm checks for data availability before attempting to access and plot the value.\n* Any assumptions made (e.g., data represents percentage change)." }
{"prompt_id": "FA-E-0047", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the annual Cost of Revenue for AMZN."}
{"prompt_id": "FA-E-0048", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the latest Return on Invested Capital (ROIC) TTM for TSLA daily."}
{"prompt_id": "FA-E-0049", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and logs the Pretax Margin TTM for NVDA daily."}
{"prompt_id": "FA-E-0050", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Income Tax Expense for JNJ."}
{"prompt_id": "FA-E-0051", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest Cash And Cash Equivalents value for META."}
{"prompt_id": "FA-E-0052", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Goodwill value for BRK.B from its latest balance sheet during initialization."}
{"prompt_id": "FA-E-0053", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Long Term Debt value for V daily."}
{"prompt_id": "FA-E-0054", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Retained Earnings for JPM from its latest balance sheet update."}
{"prompt_id": "FA-E-0055", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Current Assets for WMT daily."}
{"prompt_id": "FA-E-0056", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Current Liabilities for PG when fundamental data is available."}
{"prompt_id": "FA-E-0057", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and stores the Common Stock Equity value for UNH daily."}
{"prompt_id": "FA-E-0058", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Total Liabilities Net Minority Interest for AAPL upon fundamental data update."}
{"prompt_id": "FA-E-0059", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Inventories value for MSFT daily, if applicable."}
{"prompt_id": "FA-E-0060", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the annual Issuance of Capital Stock for GOOG."}
{"prompt_id": "FA-E-0061", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the annual Repurchase of Capital Stock for AMZN."}
{"prompt_id": "FA-E-0062", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Payment of Cash Dividends for TSLA (if any)."}
{"prompt_id": "FA-E-0063", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the TTM Investing Cash Flow for NVDA."}
{"prompt_id": "FA-E-0064", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the TTM Financing Cash Flow for JNJ daily."}
{"prompt_id": "FA-E-0065", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Days Sales Outstanding TTM for META daily."}
{"prompt_id": "FA-E-0066", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Days Inventory Outstanding TTM for BRK.B daily, if applicable."}
{"prompt_id": "FA-E-0067", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Days Payables Outstanding TTM for V daily."}
{"prompt_id": "FA-E-0068", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Interest Coverage TTM for JPM daily."}
{"prompt_id": "FA-E-0069", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and stores the latest Gross Margin TTM for WMT."}
{"prompt_id": "FA-E-0070", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Net Income Applicable To Common Shares (Annual) for PG."}
{"prompt_id": "FA-E-0071", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm that retrieves and logs the daily P/E ratio for MSFT."}
{"prompt_id": "FA-E-0072", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm to fetch and print the current Market Cap for GOOG during initialization."}
{"prompt_id": "FA-E-0073", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to plot the TTM Revenue for AMZN daily."}
{"prompt_id": "FA-E-0074", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN script to log the DebtEquityRatio for TSLA daily and generate a warning if it exceeds 2.0."}
{"prompt_id": "FA-E-0075", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm that gets and stores the DividendYield for NVDA daily."}
{"prompt_id": "FA-E-0076", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log the PBRatio for JNJ daily."}
{"prompt_id": "FA-E-0077", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot the TTM Net Income for META."}
{"prompt_id": "FA-E-0078", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to print the SectorName for BRK.B in `Initialize`."}
{"prompt_id": "FA-E-0079", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN script to log the ROE TTM for V daily."}
{"prompt_id": "FA-E-0080", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot the QuickRatio for JPM daily."}
{"prompt_id": "FA-E-0081", "strategy_category": "Fundamental Analysis", "prompt_text": "Write QuantConnect LEAN code to log the EPS TTM for WMT daily."}
{"prompt_id": "FA-E-0082", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TotalAssets for PG in `Initialize`."}
{"prompt_id": "FA-E-0083", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the OperatingMargin TTM for UNH daily."}
{"prompt_id": "FA-E-0084", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the PSRatio for AAPL daily."}
{"prompt_id": "FA-E-0085", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print the IndustryName for MSFT in `Initialize`."}
{"prompt_id": "FA-E-0086", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log the TTM FreeCashFlow for GOOG daily."}
{"prompt_id": "FA-E-0087", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CurrentRatio for AMZN daily."}
{"prompt_id": "FA-E-0088", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the BookValuePerShare for TSLA daily."}
{"prompt_id": "FA-E-0089", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the Beta for NVDA daily."}
{"prompt_id": "FA-E-0090", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the OperatingCashFlow TTM for JNJ in `Initialize`."}
{"prompt_id": "FA-E-0091", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the ROA TTM for META daily."}
{"prompt_id": "FA-E-0092", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual GrossProfit for BRK.B."}
{"prompt_id": "FA-E-0093", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the SharesOutstanding for V daily."}
{"prompt_id": "FA-E-0094", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CIK for JPM in `Initialize`."}
{"prompt_id": "FA-E-0095", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the PayoutRatio for WMT daily."}
{"prompt_id": "FA-E-0096", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the SalesPerShare TTM for PG daily."}
{"prompt_id": "FA-E-0097", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual TotalLiabilities for UNH."}
{"prompt_id": "FA-E-0098", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the PEGRatio for AAPL daily."}
{"prompt_id": "FA-E-0099", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the AssetTurnover TTM for MSFT daily."}
{"prompt_id": "FA-E-0100", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TTM EBITDA for GOOG."}
{"prompt_id": "FA-E-0101", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the NetMargin TTM for AMZN daily."}
{"prompt_id": "FA-E-0102", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CountryId for TSLA in `Initialize`."}
{"prompt_id": "FA-E-0103", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CashReturn for NVDA daily."}
{"prompt_id": "FA-E-0104", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the EarningsYield for JNJ daily."}
{"prompt_id": "FA-E-0105", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual ResearchAndDevelopment for META."}
{"prompt_id": "FA-E-0106", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the EVEBITDA ratio for BRK.B daily."}
{"prompt_id": "FA-E-0107", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the InventoryTurnover TTM for V daily."}
{"prompt_id": "FA-E-0108", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the FCFYield for JPM daily."}
{"prompt_id": "FA-E-0109", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the PCFSRatio for WMT daily."}
{"prompt_id": "FA-E-0110", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the HeadquarterCity for PG in `Initialize`."}
{"prompt_id": "FA-E-0111", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual InterestExpense for UNH."}
{"prompt_id": "FA-E-0112", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceFairValue for AAPL daily."}
{"prompt_id": "FA-E-0113", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM SellingGeneralAndAdministrative expense for MSFT."}
{"prompt_id": "FA-E-0114", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the RevenueGrowth (3yr avg) for GOOG daily."}
{"prompt_id": "FA-E-0115", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual CapitalExpenditure for AMZN."}
{"prompt_id": "FA-E-0116", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceChange1M for TSLA daily."}
{"prompt_id": "FA-E-0117", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the annual CostOfRevenue for NVDA."}
{"prompt_id": "FA-E-0118", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the ROIC TTM for JNJ daily."}
{"prompt_id": "FA-E-0119", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the PretaxMargin TTM for META daily."}
{"prompt_id": "FA-E-0120", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual IncomeTaxExpense for BRK.B."}
{"prompt_id": "FA-E-0121", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the CashAndCashEquivalents for V."}
{"prompt_id": "FA-E-0122", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the Goodwill for JPM in `Initialize`."}
{"prompt_id": "FA-E-0123", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the LongTermDebt for WMT daily."}
{"prompt_id": "FA-E-0124", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the RetainedEarnings for PG."}
{"prompt_id": "FA-E-0125", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the CurrentAssets for UNH daily."}
{"prompt_id": "FA-E-0126", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CurrentLiabilities for AAPL."}
{"prompt_id": "FA-E-0127", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the CommonStockEquity for MSFT daily."}
{"prompt_id": "FA-E-0128", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TotalLiabilitiesNetMinorityInterest for GOOG."}
{"prompt_id": "FA-E-0129", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the Inventories value for AMZN daily."}
{"prompt_id": "FA-E-0130", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the annual IssuanceOfCapitalStock for TSLA."}
{"prompt_id": "FA-E-0131", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual RepurchaseOfCapitalStock for NVDA."}
{"prompt_id": "FA-E-0132", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual PaymentOfCashDividends for JNJ."}
{"prompt_id": "FA-E-0133", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM InvestingCashFlow for META."}
{"prompt_id": "FA-E-0134", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TTM FinancingCashFlow for BRK.B daily."}
{"prompt_id": "FA-E-0135", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the DaysSalesOutstanding TTM for V daily."}
{"prompt_id": "FA-E-0136", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the DaysInventoryOutstanding TTM for JPM daily."}
{"prompt_id": "FA-E-0137", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the DaysPayablesOutstanding TTM for WMT daily."}
{"prompt_id": "FA-E-0138", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the InterestCoverage TTM for PG daily."}
{"prompt_id": "FA-E-0139", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the GrossMargin TTM for UNH."}
{"prompt_id": "FA-E-0140", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the NetIncomeApplicableToCommonShares (Annual) for AAPL."}
{"prompt_id": "FA-E-0141", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm that retrieves and logs the daily P/E ratio for MSFT."}
{"prompt_id": "FA-E-0142", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python algorithm to fetch and print the current Market Cap for GOOG during initialization."}
{"prompt_id": "FA-E-0143", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN Python script that plots the TTM Revenue for TSLA daily."}
{"prompt_id": "FA-E-0144", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a LEAN Python algorithm that accesses and logs the Debt-to-Equity ratio for NVDA every trading day."}
{"prompt_id": "FA-E-0145", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that gets and stores the latest Dividend Yield for META in a variable daily."}
{"prompt_id": "FA-E-0146", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN Python script to log the P/B ratio for BRK.B each day."}
{"prompt_id": "FA-E-0147", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm that fetches and plots the annual Net Income for V when fundamental data is updated."}
{"prompt_id": "FA-E-0148", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python algorithm to print the Sector Name for JPM during the `Initialize` method."}
{"prompt_id": "FA-E-0149", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect script that retrieves and logs the ROE for WMT daily."}
{"prompt_id": "FA-E-0150", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Quick Ratio for PG every trading day."}
{"prompt_id": "FA-E-0151", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the EPS TTM for UNH daily."}
{"prompt_id": "FA-E-0152", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the current Total Assets for AAPL during initialization."}
{"prompt_id": "FA-E-0153", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that plots the Operating Margin TTM for MSFT daily."}
{"prompt_id": "FA-E-0154", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that retrieves and logs the P/S ratio for GOOG daily."}
{"prompt_id": "FA-E-0155", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and print the Industry Name for AMZN in the `Initialize` function."}
{"prompt_id": "FA-E-0156", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to log the annual Free Cash Flow for TSLA when fundamental data becomes available."}
{"prompt_id": "FA-E-0157", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that plots the Current Ratio for NVDA daily."}
{"prompt_id": "FA-E-0158", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that retrieves and logs the Book Value Per Share for JNJ every trading day."}
{"prompt_id": "FA-E-0159", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the Beta value for META in a variable daily."}
{"prompt_id": "FA-E-0160", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the latest TTM Operating Cash Flow for BRK.B during initialization."}
{"prompt_id": "FA-E-0161", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the ROA TTM for V daily."}
{"prompt_id": "FA-E-0162", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Gross Profit for JPM when new fundamental data arrives."}
{"prompt_id": "FA-E-0163", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Shares Outstanding for WMT daily."}
{"prompt_id": "FA-E-0164", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the CIK number for PG during algorithm initialization."}
{"prompt_id": "FA-E-0165", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and plots the Payout Ratio for UNH daily, if available."}
{"prompt_id": "FA-E-0166", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that logs the Sales Per Share TTM for AAPL every trading day."}
{"prompt_id": "FA-E-0167", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest annual Total Liabilities for MSFT in a variable."}
{"prompt_id": "FA-E-0168", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the PEG Ratio for GOOG daily if the value is positive."}
{"prompt_id": "FA-E-0169", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Asset Turnover TTM for AMZN daily."}
{"prompt_id": "FA-E-0170", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the EBITDA TTM for TSLA when fundamental data is updated."}
{"prompt_id": "FA-E-0171", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Net Margin TTM for NVDA daily and compare to industry average."}
{"prompt_id": "FA-E-0172", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Country ID for JNJ during initialization."}
{"prompt_id": "FA-E-0173", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and plots the Cash Return for META daily."}
{"prompt_id": "FA-E-0174", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that logs the Earnings Yield for BRK.B every trading day."}
{"prompt_id": "FA-E-0175", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest annual Research And Development expense for V."}
{"prompt_id": "FA-E-0176", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the EV/EBITDA ratio for JPM daily."}
{"prompt_id": "FA-E-0177", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Inventory Turnover TTM for WMT daily."}
{"prompt_id": "FA-E-0178", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the FCFYield for PG daily."}
{"prompt_id": "FA-E-0179", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the PCFSRatio for UNH daily."}
{"prompt_id": "FA-E-0180", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Headquarters City for AAPL during initialization."}
{"prompt_id": "FA-E-0181", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and logs the annual Interest Expense for MSFT."}
{"prompt_id": "FA-E-0182", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Price Fair Value (Morningstar) for GOOG daily, if available."}
{"prompt_id": "FA-E-0183", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest TTM Selling, General & Administrative expense for AMZN."}
{"prompt_id": "FA-E-0184", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Revenue Growth (3 year average) for TSLA daily."}
{"prompt_id": "FA-E-0185", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the annual Capital Expenditures for NVDA when fundamental data arrives."}
{"prompt_id": "FA-E-0186", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Price Change 1 Month for JNJ daily."}
{"prompt_id": "FA-E-0187", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the annual Cost of Revenue for META."}
{"prompt_id": "FA-E-0188", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the latest ROIC TTM for BRK.B daily."}
{"prompt_id": "FA-E-0189", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and logs the Pretax Margin TTM for V daily."}
{"prompt_id": "FA-E-0190", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Income Tax Expense for JPM."}
{"prompt_id": "FA-E-0191", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the latest Cash And Cash Equivalents value for WMT."}
{"prompt_id": "FA-E-0192", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Goodwill value for PG from its latest balance sheet during initialization."}
{"prompt_id": "FA-E-0193", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Long Term Debt value for UNH daily."}
{"prompt_id": "FA-E-0194", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Retained Earnings for AAPL from its latest balance sheet update."}
{"prompt_id": "FA-E-0195", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Current Assets for MSFT daily."}
{"prompt_id": "FA-E-0196", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Current Liabilities for GOOG when fundamental data is available."}
{"prompt_id": "FA-E-0197", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and stores the Common Stock Equity value for AMZN daily."}
{"prompt_id": "FA-E-0198", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Total Liabilities Net Minority Interest for TSLA upon fundamental data update."}
{"prompt_id": "FA-E-0199", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Inventories value for NVDA daily, if applicable."}
{"prompt_id": "FA-E-0200", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the annual Issuance of Capital Stock for JNJ."}
{"prompt_id": "FA-E-0201", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the annual Repurchase of Capital Stock for META."}
{"prompt_id": "FA-E-0202", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the annual Payment of Cash Dividends for BRK.B (if any)."}
{"prompt_id": "FA-E-0203", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and store the TTM Investing Cash Flow for V."}
{"prompt_id": "FA-E-0204", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the TTM Financing Cash Flow for JPM daily."}
{"prompt_id": "FA-E-0205", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that logs the Days Sales Outstanding TTM for WMT daily."}
{"prompt_id": "FA-E-0206", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Days Inventory Outstanding TTM for PG daily, if applicable."}
{"prompt_id": "FA-E-0207", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect algorithm to fetch and log the Days Payables Outstanding TTM for UNH daily."}
{"prompt_id": "FA-E-0208", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a LEAN Python script to print the Interest Coverage TTM for AAPL daily."}
{"prompt_id": "FA-E-0209", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect algorithm that retrieves and stores the latest Gross Margin TTM for MSFT."}
{"prompt_id": "FA-E-0210", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a LEAN algorithm that plots the Net Income Applicable To Common Shares (Annual) for GOOG."}
{"prompt_id": "FA-E-0211", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the P/E ratio for GOOG daily."}
{"prompt_id": "FA-E-0212", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print the Market Cap for AMZN in `Initialize`."}
{"prompt_id": "FA-E-0213", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to plot the TTM Revenue for NVDA daily."}
{"prompt_id": "FA-E-0214", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN script to log the Debt-to-Equity ratio for JNJ daily."}
{"prompt_id": "FA-E-0215", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to store the Dividend Yield for META daily."}
{"prompt_id": "FA-E-0216", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log the P/B ratio for V daily."}
{"prompt_id": "FA-E-0217", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot the annual Net Income for JPM."}
{"prompt_id": "FA-E-0218", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to print the SectorName for WMT in `Initialize`."}
{"prompt_id": "FA-E-0219", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN script to log the ROE TTM for PG daily."}
{"prompt_id": "FA-E-0220", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot the QuickRatio for UNH daily."}
{"prompt_id": "FA-E-0221", "strategy_category": "Fundamental Analysis", "prompt_text": "Write QuantConnect LEAN code to log the EPS TTM for AAPL daily."}
{"prompt_id": "FA-E-0222", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TotalAssets for MSFT in `Initialize`."}
{"prompt_id": "FA-E-0223", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the OperatingMargin TTM for GOOG daily."}
{"prompt_id": "FA-E-0224", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the PSRatio for AMZN daily."}
{"prompt_id": "FA-E-0225", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print the IndustryName for TSLA in `Initialize`."}
{"prompt_id": "FA-E-0226", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log the TTM FreeCashFlow for NVDA daily."}
{"prompt_id": "FA-E-0227", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CurrentRatio for JNJ daily."}
{"prompt_id": "FA-E-0228", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the BookValuePerShare for META daily."}
{"prompt_id": "FA-E-0229", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the Beta for BRK.B daily."}
{"prompt_id": "FA-E-0230", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the OperatingCashFlow TTM for V in `Initialize`."}
{"prompt_id": "FA-E-0231", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the ROA TTM for JPM daily."}
{"prompt_id": "FA-E-0232", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual GrossProfit for WMT."}
{"prompt_id": "FA-E-0233", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the SharesOutstanding for PG daily."}
{"prompt_id": "FA-E-0234", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CIK for UNH in `Initialize`."}
{"prompt_id": "FA-E-0235", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the PayoutRatio for AAPL daily."}
{"prompt_id": "FA-E-0236", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the SalesPerShare TTM for MSFT daily."}
{"prompt_id": "FA-E-0237", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual TotalLiabilities for GOOG."}
{"prompt_id": "FA-E-0238", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the PEGRatio for AMZN daily."}
{"prompt_id": "FA-E-0239", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the AssetTurnover TTM for TSLA daily."}
{"prompt_id": "FA-E-0240", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TTM EBITDA for NVDA."}
{"prompt_id": "FA-E-0241", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the NetMargin TTM for JNJ daily."}
{"prompt_id": "FA-E-0242", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CountryId for META in `Initialize`."}
{"prompt_id": "FA-E-0243", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CashReturn for BRK.B daily."}
{"prompt_id": "FA-E-0244", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the EarningsYield for V daily."}
{"prompt_id": "FA-E-0245", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual ResearchAndDevelopment for JPM."}
{"prompt_id": "FA-E-0246", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the EVEBITDA ratio for WMT daily."}
{"prompt_id": "FA-E-0247", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the InventoryTurnover TTM for PG daily."}
{"prompt_id": "FA-E-0248", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the FCFYield for UNH daily."}
{"prompt_id": "FA-E-0249", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the PCFSRatio for AAPL daily."}
{"prompt_id": "FA-E-0250", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the HeadquarterCity for MSFT in `Initialize`."}
{"prompt_id": "FA-E-0251", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual InterestExpense for GOOG."}
{"prompt_id": "FA-E-0252", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceFairValue for AMZN daily."}
{"prompt_id": "FA-E-0253", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM SellingGeneralAndAdministrative expense for TSLA."}
{"prompt_id": "FA-E-0254", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the RevenueGrowth (3yr avg) for NVDA daily."}
{"prompt_id": "FA-E-0255", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual CapitalExpenditure for JNJ."}
{"prompt_id": "FA-E-0256", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceChange1M for META daily."}
{"prompt_id": "FA-E-0257", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the annual CostOfRevenue for BRK.B."}
{"prompt_id": "FA-E-0258", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the ROIC TTM for V daily."}
{"prompt_id": "FA-E-0259", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the PretaxMargin TTM for JPM daily."}
{"prompt_id": "FA-E-0260", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual IncomeTaxExpense for WMT."}
{"prompt_id": "FA-E-0261", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the CashAndCashEquivalents for PG."}
{"prompt_id": "FA-E-0262", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the Goodwill for UNH in `Initialize`."}
{"prompt_id": "FA-E-0263", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the LongTermDebt for AAPL daily."}
{"prompt_id": "FA-E-0264", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the RetainedEarnings for MSFT."}
{"prompt_id": "FA-E-0265", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the CurrentAssets for GOOG daily."}
{"prompt_id": "FA-E-0266", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CurrentLiabilities for AMZN."}
{"prompt_id": "FA-E-0267", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the CommonStockEquity for TSLA daily."}
{"prompt_id": "FA-E-0268", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TotalLiabilitiesNetMinorityInterest for NVDA."}
{"prompt_id": "FA-E-0269", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the Inventories value for JNJ daily."}
{"prompt_id": "FA-E-0270", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the annual IssuanceOfCapitalStock for META."}
{"prompt_id": "FA-E-0271", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual RepurchaseOfCapitalStock for BRK.B."}
{"prompt_id": "FA-E-0272", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual PaymentOfCashDividends for V."}
{"prompt_id": "FA-E-0273", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM InvestingCashFlow for JPM."}
{"prompt_id": "FA-E-0274", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TTM FinancingCashFlow for WMT daily."}
{"prompt_id": "FA-E-0275", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the DaysSalesOutstanding TTM for PG daily."}
{"prompt_id": "FA-E-0276", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the DaysInventoryOutstanding TTM for UNH daily."}
{"prompt_id": "FA-E-0277", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the DaysPayablesOutstanding TTM for AAPL daily."}
{"prompt_id": "FA-E-0278", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the InterestCoverage TTM for MSFT daily."}
{"prompt_id": "FA-E-0279", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the GrossMargin TTM for GOOG."}
{"prompt_id": "FA-E-0280", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the NetIncomeApplicableToCommonShares (Annual) for AMZN."}
{"prompt_id": "FA-E-0281", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the P/E ratio for TSLA daily."}
{"prompt_id": "FA-E-0282", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print the Market Cap for JNJ in `Initialize`."}
{"prompt_id": "FA-E-0283", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to plot the TTM Revenue for META daily."}
{"prompt_id": "FA-E-0284", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN script to log the Debt-to-Equity ratio for BRK.B daily."}
{"prompt_id": "FA-E-0285", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to store the Dividend Yield for V daily."}
{"prompt_id": "FA-E-0286", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log the P/B ratio for JPM daily."}
{"prompt_id": "FA-E-0287", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot the annual Net Income for WMT."}
{"prompt_id": "FA-E-0288", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to print the SectorName for PG in `Initialize`."}
{"prompt_id": "FA-E-0289", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN script to log the ROE TTM for UNH daily."}
{"prompt_id": "FA-E-0290", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot the QuickRatio for AAPL daily."}
{"prompt_id": "FA-E-0291", "strategy_category": "Fundamental Analysis", "prompt_text": "Write QuantConnect LEAN code to log the EPS TTM for MSFT daily."}
{"prompt_id": "FA-E-0292", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TotalAssets for GOOG in `Initialize`."}
{"prompt_id": "FA-E-0293", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the OperatingMargin TTM for AMZN daily."}
{"prompt_id": "FA-E-0294", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the PSRatio for TSLA daily."}
{"prompt_id": "FA-E-0295", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print the IndustryName for NVDA in `Initialize`."}
{"prompt_id": "FA-E-0296", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log the TTM FreeCashFlow for JNJ daily."}
{"prompt_id": "FA-E-0297", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CurrentRatio for META daily."}
{"prompt_id": "FA-E-0298", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the BookValuePerShare for BRK.B daily."}
{"prompt_id": "FA-E-0299", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the Beta for V daily."}
{"prompt_id": "FA-E-0300", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the OperatingCashFlow TTM for JPM in `Initialize`."}
{"prompt_id": "FA-E-0301", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the ROA TTM for WMT daily."}
{"prompt_id": "FA-E-0302", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual GrossProfit for PG."}
{"prompt_id": "FA-E-0303", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the SharesOutstanding for UNH daily."}
{"prompt_id": "FA-E-0304", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CIK for AAPL in `Initialize`."}
{"prompt_id": "FA-E-0305", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the PayoutRatio for MSFT daily."}
{"prompt_id": "FA-E-0306", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the SalesPerShare TTM for GOOG daily."}
{"prompt_id": "FA-E-0307", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual TotalLiabilities for AMZN."}
{"prompt_id": "FA-E-0308", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the PEGRatio for TSLA daily."}
{"prompt_id": "FA-E-0309", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the AssetTurnover TTM for NVDA daily."}
{"prompt_id": "FA-E-0310", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TTM EBITDA for JNJ."}
{"prompt_id": "FA-E-0311", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the NetMargin TTM for META daily along with its year-over-year change."}
{"prompt_id": "FA-E-0312", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CountryId for BRK.B in `Initialize`."}
{"prompt_id": "FA-E-0313", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CashReturn for V daily."}
{"prompt_id": "FA-E-0314", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the EarningsYield for JPM daily."}
{"prompt_id": "FA-E-0315", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual ResearchAndDevelopment for WMT."}
{"prompt_id": "FA-E-0316", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the EVEBITDA ratio for PG daily."}
{"prompt_id": "FA-E-0317", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the InventoryTurnover TTM for UNH daily."}
{"prompt_id": "FA-E-0318", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the FCFYield for AAPL daily."}
{"prompt_id": "FA-E-0319", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the PCFSRatio for MSFT daily."}
{"prompt_id": "FA-E-0320", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the HeadquarterCity for GOOG in `Initialize`."}
{"prompt_id": "FA-E-0321", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual InterestExpense for AMZN."}
{"prompt_id": "FA-E-0322", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceFairValue for TSLA daily."}
{"prompt_id": "FA-E-0323", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM SellingGeneralAndAdministrative expense for NVDA."}
{"prompt_id": "FA-E-0324", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the RevenueGrowth (3yr avg) for JNJ daily."}
{"prompt_id": "FA-E-0325", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual CapitalExpenditure for META."}
{"prompt_id": "FA-E-0326", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceChange1M for BRK.B daily."}
{"prompt_id": "FA-E-0327", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the annual CostOfRevenue for V."}
{"prompt_id": "FA-E-0328", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the ROIC TTM for JPM daily."}
{"prompt_id": "FA-E-0329", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the PretaxMargin TTM for WMT daily."}
{"prompt_id": "FA-E-0330", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual IncomeTaxExpense for PG."}
{"prompt_id": "FA-E-0331", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the CashAndCashEquivalents for UNH."}
{"prompt_id": "FA-E-0332", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the Goodwill for AAPL in `Initialize`."}
{"prompt_id": "FA-E-0333", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the LongTermDebt for MSFT daily."}
{"prompt_id": "FA-E-0334", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the RetainedEarnings for GOOG."}
{"prompt_id": "FA-E-0335", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the CurrentAssets for AMZN daily."}
{"prompt_id": "FA-E-0336", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CurrentLiabilities for TSLA."}
{"prompt_id": "FA-E-0337", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the CommonStockEquity for NVDA daily."}
{"prompt_id": "FA-E-0338", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TotalLiabilitiesNetMinorityInterest for JNJ."}
{"prompt_id": "FA-E-0339", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the Inventories value for META daily."}
{"prompt_id": "FA-E-0340", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the annual IssuanceOfCapitalStock for BRK.B."}
{"prompt_id": "FA-E-0341", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual RepurchaseOfCapitalStock for V."}
{"prompt_id": "FA-E-0342", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual PaymentOfCashDividends for JPM."}
{"prompt_id": "FA-E-0343", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM InvestingCashFlow for WMT."}
{"prompt_id": "FA-E-0344", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TTM FinancingCashFlow for PG daily."}
{"prompt_id": "FA-E-0345", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the DaysSalesOutstanding TTM for UNH daily."}
{"prompt_id": "FA-E-0346", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the DaysInventoryOutstanding TTM for AAPL daily."}
{"prompt_id": "FA-E-0347", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the DaysPayablesOutstanding TTM for MSFT daily."}
{"prompt_id": "FA-E-0348", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the InterestCoverage TTM for GOOG daily."}
{"prompt_id": "FA-E-0349", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the GrossMargin TTM for AMZN."}
{"prompt_id": "FA-E-0350", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the NetIncomeApplicableToCommonShares (Annual) for TSLA."}
{"prompt_id": "FA-E-0351", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the NetMargin TTM for NVDA daily and compare to industry average."}
{"prompt_id": "FA-E-0352", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print the Market Cap for TSLA in `Initialize`."}
{"prompt_id": "FA-E-0353", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to plot the TTM Revenue for JNJ daily."}
{"prompt_id": "FA-E-0354", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN script to log the Debt-to-Equity ratio for META daily."}
{"prompt_id": "FA-E-0355", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to store the Dividend Yield for BRK.B daily (if applicable)."}
{"prompt_id": "FA-E-0356", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log the P/B ratio for WMT daily."}
{"prompt_id": "FA-E-0357", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot the annual Net Income for PG."}
{"prompt_id": "FA-E-0358", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to print the SectorName for UNH in `Initialize`."}
{"prompt_id": "FA-E-0359", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN script to log the ROE TTM for AAPL daily."}
{"prompt_id": "FA-E-0360", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot the QuickRatio for MSFT daily."}
{"prompt_id": "FA-E-0361", "strategy_category": "Fundamental Analysis", "prompt_text": "Write QuantConnect LEAN code to log the EPS TTM for GOOG daily."}
{"prompt_id": "FA-E-0362", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TotalAssets for AMZN in `Initialize`."}
{"prompt_id": "FA-E-0363", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the OperatingMargin TTM for TSLA daily."}
{"prompt_id": "FA-E-0364", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the PSRatio for NVDA daily."}
{"prompt_id": "FA-E-0365", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print the IndustryName for JNJ in `Initialize`."}
{"prompt_id": "FA-E-0366", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log the TTM FreeCashFlow for META daily."}
{"prompt_id": "FA-E-0367", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CurrentRatio for BRK.B daily."}
{"prompt_id": "FA-E-0368", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the BookValuePerShare for V daily."}
{"prompt_id": "FA-E-0369", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the Beta for JPM daily."}
{"prompt_id": "FA-E-0370", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the OperatingCashFlow TTM for WMT in `Initialize`."}
{"prompt_id": "FA-E-0371", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the ROA TTM for PG daily."}
{"prompt_id": "FA-E-0372", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual GrossProfit for UNH."}
{"prompt_id": "FA-E-0373", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the SharesOutstanding for AAPL daily."}
{"prompt_id": "FA-E-0374", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CIK for MSFT in `Initialize`."}
{"prompt_id": "FA-E-0375", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the PayoutRatio for GOOG daily."}
{"prompt_id": "FA-E-0376", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the SalesPerShare TTM for AMZN daily."}
{"prompt_id": "FA-E-0377", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual TotalLiabilities for TSLA."}
{"prompt_id": "FA-E-0378", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the PEGRatio for NVDA daily."}
{"prompt_id": "FA-E-0379", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the AssetTurnover TTM for JNJ daily."}
{"prompt_id": "FA-E-0380", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TTM EBITDA for META."}
{"prompt_id": "FA-E-0381", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the NetMargin TTM for BRK.B daily."}
{"prompt_id": "FA-E-0382", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CountryId for V in `Initialize`."}
{"prompt_id": "FA-E-0383", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot the CashReturn for JPM daily."}
{"prompt_id": "FA-E-0384", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to log the EarningsYield for WMT daily."}
{"prompt_id": "FA-E-0385", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the annual ResearchAndDevelopment for PG."}
{"prompt_id": "FA-E-0386", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the EVEBITDA ratio for UNH daily."}
{"prompt_id": "FA-E-0387", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the InventoryTurnover TTM for AAPL daily."}
{"prompt_id": "FA-E-0388", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the FCFYield for MSFT daily."}
{"prompt_id": "FA-E-0389", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the PCFSRatio for GOOG daily."}
{"prompt_id": "FA-E-0390", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the HeadquarterCity for AMZN in `Initialize`."}
{"prompt_id": "FA-E-0391", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual InterestExpense for TSLA."}
{"prompt_id": "FA-E-0392", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceFairValue for NVDA daily and highlight when undervalued."}
{"prompt_id": "FA-E-0393", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM SellingGeneralAndAdministrative expense for JNJ."}
{"prompt_id": "FA-E-0394", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the RevenueGrowth (3yr avg) for META daily."}
{"prompt_id": "FA-E-0395", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual CapitalExpenditure for BRK.B."}
{"prompt_id": "FA-E-0396", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the PriceChange1M for V daily."}
{"prompt_id": "FA-E-0397", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the annual CostOfRevenue for JPM."}
{"prompt_id": "FA-E-0398", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the ROIC TTM for WMT daily."}
{"prompt_id": "FA-E-0399", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the PretaxMargin TTM for PG daily."}
{"prompt_id": "FA-E-0400", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual IncomeTaxExpense for UNH."}
{"prompt_id": "FA-E-0401", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the CashAndCashEquivalents for AAPL."}
{"prompt_id": "FA-E-0402", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the Goodwill for MSFT in `Initialize`."}
{"prompt_id": "FA-E-0403", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the LongTermDebt for GOOG daily."}
{"prompt_id": "FA-E-0404", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the RetainedEarnings for AMZN."}
{"prompt_id": "FA-E-0405", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the CurrentAssets for TSLA daily."}
{"prompt_id": "FA-E-0406", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the CurrentLiabilities for NVDA."}
{"prompt_id": "FA-E-0407", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the CommonStockEquity for JNJ daily."}
{"prompt_id": "FA-E-0408", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the TotalLiabilitiesNetMinorityInterest for META."}
{"prompt_id": "FA-E-0409", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the Inventories value for BRK.B daily."}
{"prompt_id": "FA-E-0410", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the annual IssuanceOfCapitalStock for V."}
{"prompt_id": "FA-E-0411", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the annual RepurchaseOfCapitalStock for JPM."}
{"prompt_id": "FA-E-0412", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the annual PaymentOfCashDividends for WMT."}
{"prompt_id": "FA-E-0413", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store the TTM InvestingCashFlow for PG."}
{"prompt_id": "FA-E-0414", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the TTM FinancingCashFlow for UNH daily."}
{"prompt_id": "FA-E-0415", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log the DaysSalesOutstanding TTM for AAPL daily."}
{"prompt_id": "FA-E-0416", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the DaysInventoryOutstanding TTM for MSFT daily."}
{"prompt_id": "FA-E-0417", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log the DaysPayablesOutstanding TTM for GOOG daily."}
{"prompt_id": "FA-E-0418", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print the InterestCoverage TTM for AMZN daily."}
{"prompt_id": "FA-E-0419", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store the GrossMargin TTM for TSLA."}
{"prompt_id": "FA-E-0420", "strategy_category": "Fundamental Analysis", "prompt_text": "Create QuantConnect LEAN code to plot the NetIncomeApplicableToCommonShares (Annual) for NVDA."}
{"prompt_id": "FA-E-0421", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log Meta's (META) Interest Coverage TTM daily and track its quarterly trend."}
{"prompt_id": "FA-E-0422", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print Berkshire Hathaway's (BRK.B) Book Value Per Share in `Initialize`."}
{"prompt_id": "FA-E-0423", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to store JPMorgan's (JPM) Current Ratio daily."}
{"prompt_id": "FA-E-0424", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log Amazon's (AMZN) Debt-to-Equity ratio every day."}
{"prompt_id": "FA-E-0425", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log Tesla's (TSLA) Price-to-Sales (P/S) ratio daily."}
{"prompt_id": "FA-E-0426", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script that logs NVIDIA's (NVDA) Return on Equity (ROE) daily."}
{"prompt_id": "FA-E-0427", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print J&J's (JNJ) Sector Name in `Initialize`."}
{"prompt_id": "FA-E-0428", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot NVIDIA's (NVDA) Free Cash Flow Yield (FCFYield) daily."}
{"prompt_id": "FA-E-0429", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to log Berkshire Hathaway's (BRK.B) Price-to-Book (P/B) ratio daily."}
{"prompt_id": "FA-E-0430", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to print Visa's (V) EPS TTM during initialization."}
{"prompt_id": "FA-E-0431", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN script to plot JPMorgan's (JPM) Operating Margin TTM."}
{"prompt_id": "FA-E-0432", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log Walmart's (WMT) Price-to-Sales (P/S) ratio daily."}
{"prompt_id": "FA-E-0433", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print P&G's (PG) Industry Name in `Initialize`."}
{"prompt_id": "FA-E-0434", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log Meta's (META) PEG Ratio daily if positive."}
{"prompt_id": "FA-E-0435", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot Apple's (AAPL) Quick Ratio daily."}
{"prompt_id": "FA-E-0436", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN script to log Microsoft's (MSFT) Book Value Per Share daily."}
{"prompt_id": "FA-E-0437", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store Google's (GOOG) Current Assets value daily."}
{"prompt_id": "FA-E-0438", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot Amazon's (AMZN) TTM Operating Cash Flow."}
{"prompt_id": "FA-E-0439", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN script to log Tesla's (TSLA) Return on Assets (ROA) TTM daily."}
{"prompt_id": "FA-E-0440", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store Apple's (AAPL) Return on Invested Capital (ROIC) TTM daily."}
{"prompt_id": "FA-E-0441", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate QuantConnect LEAN code to plot J&J's (JNJ) Payout Ratio daily."}
{"prompt_id": "FA-E-0442", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print Visa's (V) Price Fair Value (Morningstar) daily."}
{"prompt_id": "FA-E-0443", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print Berkshire Hathaway's (BRK.B) PEG Ratio daily if positive."}
{"prompt_id": "FA-E-0444", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to plot Visa's (V) Asset Turnover TTM daily."}
{"prompt_id": "FA-E-0445", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log JPMorgan's (JPM) TTM EBITDA daily."}
{"prompt_id": "FA-E-0446", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to print Walmart's (WMT) Net Margin TTM daily."}
{"prompt_id": "FA-E-0447", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log Walmart's (WMT) Earnings Per Share (EPS) TTM daily."}
{"prompt_id": "FA-E-0448", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log UnitedHealth's (UNH) Earnings Yield daily."}
{"prompt_id": "FA-E-0449", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot Google's (GOOG) Return on Assets (ROA) TTM daily."}
{"prompt_id": "FA-E-0450", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to plot Microsoft's (MSFT) Inventory Turnover TTM."}
{"prompt_id": "FA-E-0451", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log Google's (GOOG) Free Cash Flow Yield (FCFYield) daily."}
{"prompt_id": "FA-E-0452", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to print Amazon's (AMZN) Price/Cash Flow Per Share Ratio (PCFSRatio) daily."}
{"prompt_id": "FA-E-0453", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to plot Tesla's (TSLA) Price Fair Value (Morningstar) daily."}
{"prompt_id": "FA-E-0454", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to log NVIDIA's (NVDA) Revenue Growth (3yr avg) daily."}
{"prompt_id": "FA-E-0455", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store NVIDIA's (NVDA) Price-to-Earnings (P/E) ratio daily."}
{"prompt_id": "FA-E-0456", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot Meta's (META) Return on Invested Capital (ROIC) TTM."}
{"prompt_id": "FA-E-0457", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log Meta's (META) Days Inventory Outstanding TTM daily."}
{"prompt_id": "FA-E-0458", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print Visa's (V) Long Term Debt value during initialization."}
{"prompt_id": "FA-E-0459", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot JPMorgan's (JPM) Retained Earnings upon fundamental update."}
{"prompt_id": "FA-E-0460", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to log Walmart's (WMT) Current Assets daily."}
{"prompt_id": "FA-E-0461", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print P&G's (PG) Current Liabilities daily."}
{"prompt_id": "FA-E-0462", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot UnitedHealth's (UNH) Common Stock Equity daily."}
{"prompt_id": "FA-E-0463", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log Tesla's (TSLA) Gross Margin TTM daily."}
{"prompt_id": "FA-E-0464", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to print Microsoft's (MSFT) Inventories value in `Initialize` (if applicable)."}
{"prompt_id": "FA-E-0465", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print NVIDIA's (NVDA) Days Payables Outstanding TTM daily."}
{"prompt_id": "FA-E-0466", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log Amazon's (AMZN) TTM Financing Cash Flow daily."}
{"prompt_id": "FA-E-0467", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print Tesla's (TSLA) Days Sales Outstanding TTM daily."}
{"prompt_id": "FA-E-0468", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to plot NVIDIA's (NVDA) Days Inventory Outstanding TTM."}
{"prompt_id": "FA-E-0469", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log J&J's (JNJ) Days Payables Outstanding TTM daily."}
{"prompt_id": "FA-E-0470", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to print Meta's (META) Interest Coverage TTM and compare it against competitors."}
{"prompt_id": "FA-E-0471", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log Visa's (V) Retained Earnings daily."}
{"prompt_id": "FA-E-0472", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log Visa's (V) Net Income Applicable To Common Shares (Annual)."}
{"prompt_id": "FA-E-0473", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to store Walmart's (WMT) Price-to-Book (P/B) ratio daily and calculate its 50-day moving average."}
{"prompt_id": "FA-E-0474", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to plot Walmart's (WMT) P/B ratio against retail industry median values daily."}
{"prompt_id": "FA-E-0475", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log P&G's (PG) annual Net Income."}
{"prompt_id": "FA-E-0476", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to print UnitedHealth's (UNH) Sector Name in `Initialize`."}
{"prompt_id": "FA-E-0477", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to plot Apple's (AAPL) ROE TTM daily."}
{"prompt_id": "FA-E-0478", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to log Microsoft's (MSFT) Quick Ratio daily."}
{"prompt_id": "FA-E-0479", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log Microsoft's (MSFT) Earnings Yield daily."}
{"prompt_id": "FA-E-0480", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot Amazon's (AMZN) Total Assets upon fundamental update."}
{"prompt_id": "FA-E-0481", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print Amazon's (AMZN) Net Margin TTM daily."}
{"prompt_id": "FA-E-0482", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print NVIDIA's (NVDA) P/S ratio daily."}
{"prompt_id": "FA-E-0483", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot J&J's (JNJ) Industry Name (Note: Plotting text isn't standard; interpret as log/print). Log J&J's Industry Name."}
{"prompt_id": "FA-E-0484", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to log Meta's (META) TTM Free Cash Flow daily."}
{"prompt_id": "FA-E-0485", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to plot Berkshire Hathaway's (BRK.B) Current Ratio daily."}
{"prompt_id": "FA-E-0486", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to print Visa's (V) Book Value Per Share daily."}
{"prompt_id": "FA-E-0487", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to log Berkshire Hathaway's (BRK.B) Asset Turnover TTM daily."}
{"prompt_id": "FA-E-0488", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to plot Walmart's (WMT) TTM Operating Cash Flow."}
{"prompt_id": "FA-E-0489", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log Tesla's (TSLA) Free Cash Flow Yield (FCFYield) daily and compare to automotive sector average."}
{"prompt_id": "FA-E-0490", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to print UnitedHealth's (UNH) Shares Outstanding daily."}
{"prompt_id": "FA-E-0491", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to plot Apple's (AAPL) Payout Ratio daily."}
{"prompt_id": "FA-E-0492", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to log Microsoft's (MSFT) Sales Per Share TTM daily."}
{"prompt_id": "FA-E-0493", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to print Google's (GOOG) PEG Ratio daily."}
{"prompt_id": "FA-E-0494", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN algorithm to plot Amazon's (AMZN) Asset Turnover TTM daily."}
{"prompt_id": "FA-E-0495", "strategy_category": "Fundamental Analysis", "prompt_text": "Generate a QuantConnect LEAN script to log Tesla's (TSLA) Free Cash Flow Yield (FCFYield) history and create a quarterly trend chart."}
{"prompt_id": "FA-E-0496", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to print NVIDIA's (NVDA) Net Margin TTM daily along with its year-over-year change."}
{"prompt_id": "FA-E-0497", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop a QuantConnect LEAN algorithm to log NVIDIA's (NVDA) Price Fair Value (Morningstar) daily and create buy/sell signals when crossing thresholds."}
{"prompt_id": "FA-E-0498", "strategy_category": "Fundamental Analysis", "prompt_text": "Create a QuantConnect LEAN script to log Meta's (META) Earnings Yield daily."}
{"prompt_id": "FA-E-0499", "strategy_category": "Fundamental Analysis", "prompt_text": "Write a QuantConnect LEAN algorithm to print Berkshire Hathaway's (BRK.B) EV/EBITDA ratio daily."}
{"prompt_id": "FA-E-0500", "strategy_category": "Fundamental Analysis", "prompt_text": "Develop QuantConnect LEAN code to plot Visa's (V) Inventory Turnover TTM daily."}